// GUI API Nabla: Herramientas de diseño de interfaz gráfica de usuario en Hp prime

// Contáctame:
// Autor: Adhemar Mizushima, Marzo 2023
// Facebook 1: https://www.facebook.com/adhemar.mizushima.14/
// Facebook 2: https://www.facebook.com/NablaTec
// YouTube: https://www.youtube.com/@Nabla-Tec
// E-mail: adhemar.mm@gmail.com
// Whatsapp: +591 71072659

// Sigue este proyecto en GitHub:
// https://github.com/Adhemizu/OOP-HP_Prime
// Página: https://sites.google.com/view/nabla-tec/

#pragma mode( separator(.,;) integer(h64) )

// sub-routines
Main();

// classes functions
Widget_Class();
Widget_Move();
Widget_Size();
Widget_Color();
Widget_setText();
Widget_Open();
Widget_Close();
Widget_AddWidget();
Widget_setParent();
Widget_setLayout();
Widget_OnLayout();
Widget_Plot();
Widget_PlotText();
Widget_PlotWidgets();
Widget_cotrains();
Widget_mouseDown();
Widget_Priority();
Widget_getKey();
Widget_delete();
Widget_mouseMove();
Widget_mouseUp();
Widget_mouseClick();
Widget_mouseStretch();
Widget_mouseRotate();
Widget_mouseLongClick();
Widget_arrowUp();
Widget_arrowDown();
Widget_arrowLeft();
Widget_arrowRight();
Widget_escape();
Widget_enter();
Widget_alphaKey();
Widget_shift();
Widget_Connect();
Widget_Signal();

MainWindow_Class();
MainWindow_setTitle();
MainWindow_BgColor();
MainWindow_Plot();
MainWindow_PlotTitleBar();
MainWindow_mouseDown();

DialogWindow_Class();
DialogWindow_mouseDown();
DialogWindow_mouseMove();

TabWidget_Class();
TabWidget_AddWidget();
TabWidget_setHeaders();
TabWidget_setTabIndex();
TabWidget_Plot();
TabWidget_PlotHeaders();
TabWidget_PlotCurrentWidget();
TabWidget_mouseDown();
TabWidget_ItemPicked();

MenuBar_Class();
MenuBar_AddWidget();

LineEdit_Class();
LineEdit_Move();
LineEdit_Size();
LineEdit_Label();
LineEdit_Text();
LineEdit_setTypeData();
LineEdit_Get();
LineEdit_Plot();
LineEdit_mouseDown();
LineEdit_getKey();
LineEdit_delete();
LineEdit_enter();
LineEdit_arrowLeft();
LineEdit_arrowRight();

Button_Class();
Button_Move();
Button_Size();
Button_Label();
Button_Color();
Button_Plot();
Button_mouseDown();

CheckBox_Class();
CheckBox_Move();
CheckBox_Size();
CheckBox_Mark();
CheckBox_Color();
CheckBox_Plot();
CheckBox_Connect();
CheckBox_mouseDown();

RadioButton_Class();
RadioButton_AddWidget();
RadioButton_mouseDown();

ComboBox_Class();
ComboBox_Move();
ComboBox_Size();
ComboBox_setHeightList();
ComboBox_Title();
ComboBox_setList();
ComboBox_setDimView();
ComboBox_setIndex();
ComboBox_setListDrop();
ComboBox_DimTemp();
ComboBox_Color();
ComboBox_Plot();
ComboBox_PlotHeader();
ComboBox_PlotTitle();
ComboBox_PlotList();
ComboBox_PlotScrollBar();
ComboBox_mouseDown();
ComboBox_Connect();
ComboBox_cotrainsPickItem();
ComboBox_mouseDownPick();
ComboBox_mouseDownScrollBar();
ComboBox_mouseMove();
ComboBox_arrowUp();
ComboBox_arrowDown();
ComboBox_UpdateDimTemp();

TableWidget_Class();
TableWidget_Move();
TableWidget_Size();
TableWidget_Title();
TableWidget_setTable();
TableWidget_setHeightTable();
TableWidget_setHead();
TableWidget_setRowHeader();
TableWidget_setColHeader();
TableWidget_setRowHeaderWeight();
TableWidget_setColHeaderHeight();
TableWidget_setDimView();
TableWidget_DimTemp();
TableWidget_Plot();
TableWidget_PlotHeader();
TableWidget_PlotTitle();
TableWidget_PlotRCHeaders();
TableWidget_PlotTable();
TableWidget_PlotInfBar();
TableWidget_PlotScrollBars();
TableWidget_mouseDown();
TableWidget_cotrainsPick();
TableWidget_cotrainsPickItemX();
TableWidget_cotrainsPickItemY();
TableWidget_mouseDownPick();
TableWidget_cotrainsScrollBarV();
TableWidget_cotrainsScrollBarH();
TableWidget_mouseDownScrollBar();
TableWidget_mouseMove();
TableWidget_mouseLongClick();
TableWidget_arrowUp();
TableWidget_arrowDown();
TableWidget_arrowLeft();
TableWidget_arrowRight();
TableWidget_UpdateDimTemp();

Board_Class();
Board_Move();
Board_Size();
Board_Vertex();
Board_updateEdge();
Board_updateSurface();
Board_updateSet();
Board_Edge();
Board_Surfaces();
Board_Norm();
Board_Projection();
Board_PFactor();
Board_Plot();
Board_PlotRen();
Board_PlotBox();
Board_PlotAlphaKey();
Board_PlotBackground();
Board_PlotVertexes();
Board_PlotEdges();
Board_PlotSurfaces();
Board_PlotAxis();
Board_PlotFieldSelect();
Board_PlotItemsSelected();
Board_cotrains();
Board_mouseDown();
Board_Connect();
Board_UpdateRen();
Board_mouseLongClick();
Board_mouseMove();
Board_mouseUp();
Board_LayerCubeSelected();
Board_ItemsSelected();
Board_VertexSelected();
Board_EdgeSelected();
Board_alphaKey();
r3d();
rotate_cam();
Cube();
CaseRot();

// handlers
on_plot();
on_handlers();
on_keyBoardHandlers();
on_arrowUp();
on_arrowDown();
on_arrowLeft();
on_arrowRight();
on_escape();
on_enter();
on_delete();
on_alphaKey();
on_shift();
on_getKey();

on_mouseHandlers();
on_mouseDown();
on_mouseMove();
on_mouseUp();
on_mouseClick();
on_mouseStretch();
on_mouseRotate();
on_mouseLongClick();

// oop functions
init();
type_inheritance();
s_();
g_();
attr_index();
func_index();
def();
name_();
className();
class_();
search_func();
unpack();
Obj();

// utilities
temp1;
temp2;
Nill:= "Nill";
action;

TRANL();
drawRect();
fillRect();
fillPoly1();
wText();
drawPoly();
drawText();
drawLine1();
drawLine();
drawArc();
RGBL();
zeros_();
isList();
iColor();
wVal();
wVali();
getK();
SUBe();
SUBer();
SUBo();
PUTo();
PUTos();
PUTosr();
sortIndex();
getIndex();

gColor();
distPtoLine();
lineCoeff();
norm();
isPinRect();
isPinLineProj();
lineIntersection();
lineRect();
SProd();
get_();
rotz();
roty();
rotx();
clamp();
sign_();
isPinTriang();
isPinQuad();

// class vars
Widget;
TabWidget;
MainWindow;
GroupBox;
MenuBar;
LineEdit;
Button;
CheckBox;
RadioButton;
ComboBox;
TableWidget;
Board;
DialogWindow;

EXPORT ventana;
EXPORT boton1;

//******************************* CODE *********************************
START()
BEGIN
	Widget_Class();
	TabWidget_Class();
	MainWindow_Class();
	GroupBox_Class();
	MenuBar_Class();
	LineEdit_Class();
	Button_Class();
	CheckBox_Class();
	RadioButton_Class();
	ComboBox_Class();
	TableWidget_Class();
	Board_Class();
	DialogWindow_Class();
	
	IFERR
		Main();
		on_plot();
	THEN
		DIMGROB_P(G1,0,0);
	END;
	DIMGROB_P(G1,0,0);
	STARTVIEW(-4,1);
END;

Main()
BEGIN
	Obj("ventana", MainWindow);
	def("ventana", "setTitle", {"Mi ventana"});
	
	Obj("boton1",  Button);
	def("ventana", "AddWidget", {"boton1"});
	def("boton1", "Label", {"BOTÓN"});
	def("boton1", "Move",  {5,50});
	def("boton1", "Connect", {"IsClicked", {'CambiarTitulo()'}});
END;

CambiarTitulo() // 120.7 -62   1 38 23
BEGIN
	def("ventana", "setTitle", {"Has presionado el botón"});
END;


//********************************* HANDLERS **********************************
on_plot()
BEGIN
	action:={{""},""};
	PRINT(); RECT();
	DIMGROB_P(G1,320,240);
	REPEAT
		def("ventana", "Plot", Nill);
		BLIT_P(G1,0,0,320,240);
	UNTIL on_handlers() OR NOT g_("ventana", "open");
END;

on_handlers()
BEGIN
	CASE
		IF temp1:= ISKEYDOWN(2) THEN // up
			action:={2,action(1)}; WAIT(0.01);
		END;
		IF temp1:= ISKEYDOWN(12) THEN // down
			action:={12,action(1)}; WAIT(0.01);
		END;
		IF temp1:= ISKEYDOWN(7) THEN // left
			action:={7,action(1)}; WAIT(0.01);
		END;
		IF temp1:= ISKEYDOWN(8) THEN // right
			action:={8,action(1)}; WAIT(0.01);
		END;
		IF temp1:= ISKEYDOWN(19) THEN // delete
			action:={19,action(1)}; WAIT(0.01);
		END;
		action:={WAIT(−1)+0,action(1)};
		temp2:=1;
	END;
	IF TYPE(action(1))==0 THEN
		//KEYBOARD ACCTIONS
		temp2:=(temp1 XOR temp2);
		IF temp2 THEN
			on_keyBoardHandlers(action(1));
			IF NOT(temp1) THEN WAIT(0.05); END;
		END;
		RETURN action(1)==4;
	ELSE
		//MOUSE ACCTIONS
		on_mouseHandlers(action);
		RETURN 0;
	END;
END;

on_keyBoardHandlers(action)
BEGIN
	CASE
		IF action == 2 THEN //up
			on_arrowUp();
		END;
		IF action == 12 THEN //down
			on_arrowDown();
		END;
		IF action == 7 THEN //left
			on_arrowLeft();
		END;
		IF action == 8 THEN //right
			on_arrowRight();
		END;
		IF action == 4 THEN //esc
			on_escape();
		END;
		IF action == 30 THEN //enter
			on_enter();
		END;
		IF action == 19 THEN //del
			on_delete();
		END;
		IF action == 36 THEN //alpha
			on_alphaKey();
		END;
		IF action == 41 THEN //shift
			on_shift();
		END;
		on_getKey();
	END;
END;

on_mouseHandlers(action)
BEGIN
	LOCAL x,y;
	CASE
		IF action(1,1)==0 THEN //Mouse Down
			x:= action(1,2);
			y:= action(1,3);
			on_mouseDown(x,y);
		END;
		IF action(1,1)==1 THEN //Mouse Move
			on_mouseMove(action);
		END;
		IF action(1,1)==2 THEN //Mouse Up
			// x/y is not provided
			on_mouseUp(action);
		END;
		IF action(1,1)==3 THEN //Mouse Menu Click
			// note, if a click is detected, there is no MouseUp
			on_mouseClick(action);
		END;
		IF action(1,1)==5 THEN //Mouse Stretch.
			// x/y is the delta since the last event.
			// dx/dy is the delta since the ORIGINAL mouse down...
			on_mouseStretch(action);
		END;
		IF action(1,1)==6 THEN //Mouse Rotate
			// x is original angle, y is new angle in 32nd of a circle.
			on_mouseRotate(action);
		END;
		IF action(1,1)==7 THEN //Mouse Long Click
			// This means that the mouse stayed down for 1 second
			on_mouseLongClick(action);
		END;
	END;
END;

on_mouseDown(x, y)
BEGIN
	def("ventana","mouseDown",{x,y});
END;

on_mouseMove(action)
BEGIN
	def("ventana", "mouseMove", {action});
END;

on_mouseUp(action)
BEGIN
	def("ventana", "mouseUp", Nill);
END;

on_mouseClick(action)
BEGIN
	def("ventana","mouseDown",{action(1,2),action(1,3)});
END;

on_mouseStretch(action)
BEGIN

END;

on_mouseRotate(action)
BEGIN

END;

on_mouseLongClick(action)
BEGIN
	def("ventana","mouseLongClick", Nill);
END;

on_arrowUp()
BEGIN
	def("ventana", "arrowUp", {action(2)});
END;

on_arrowDown()
BEGIN
	def("ventana", "arrowDown", {action(2)});
END;

on_arrowLeft()
BEGIN
	def("ventana", "arrowLeft", {action(2)});
END;

on_arrowRight()
BEGIN
	def("ventana", "arrowRight", {action(2)});
END;

on_escape()
BEGIN

END;

on_enter()
BEGIN
	def("ventana", "enter", Nill);
END;

on_delete()
BEGIN
	def("ventana", "delete", Nill);
END;

on_alphaKey()
BEGIN
	def("ventana", "alphaKey", Nill);
END;

on_shift()
BEGIN

END;

on_getKey()
BEGIN
	def("ventana", "getKey", {action});
END;


//******************************** WIDGET CLASS *************************
Widget_Class()
BEGIN
	init(
		"Widget",
		{
			{"x", 0},
			{"y", 0},
			{"w", 320},
			{"h", 240},
			{"ltxt", {}},
			{"lobj", {}},
			{"fobj", 0},
			{"open", 1},
			{"focus", 0},
			{"slot", 0},
			{"signalIsClicked", {}},
			{"color_bg", {200,200,200}},
			{"color_bo", {0,0,0}},
			{"color_la", {0,0,0}}
		},
		{"Move", "Size", "Color", "setText",
		"Open", "Close", "AddWidget", "setParent", "setLayout",
		"Plot", "PlotText", "PlotWidgets", "Priority",
		"cotrains", "mouseDown", "mouseUp", "getKey", "alphaKey", "shift", "delete", "enter",
		"arrowUp", "arrowDown", "arrowLeft", "arrowRight",
		"Connect", "Signal"},
		Nill
	);
END;

Widget_Move(self, x, y)
BEGIN
	LOCAL xt:= g_(self, "x");
	LOCAL yt:= g_(self, "y");
	s_(self, "x", x);
	s_(self, "y", y);
	
	LOCAL i, lobj:= g_(self, "lobj");
	FOR i:=1 TO SIZE(lobj) DO
		def(lobj(i), "Move", {x+(g_(lobj(i),"x")-xt), y+(g_(lobj(i),"y")-yt)});
	END;
END;

Widget_Size(self, w, h)
BEGIN
	s_(self, "w", w);
	s_(self, "h", h);
END;

Widget_Color(self, label, color)
BEGIN
	s_(self, "color_"+label, color);
END;

Widget_setText(self, type_, v)
BEGIN
	CASE
		IF type_ == "add" THEN
			s_(self, "ltxt", CONCAT(g_(self, "ltxt"), {v}));
		END;
		IF type_ == "addList" THEN
			s_(self, "ltxt", CONCAT(g_(self, "ltxt"), v));
		END;
		IF type_ == "setList" THEN
			s_(self, "ltxt", v);
		END;
		IF type_ == "remove" THEN
			s_(self, "ltxt", SUBe(g_(self, "ltxt"), v));
		END;	
		IF type_ == "clear" THEN
			s_(self, "ltxt", {});
		END;
	END;
END;

Widget_Open(self)
BEGIN
	s_(self, "open", NOT g_(self, "open"));
	s_(self, "focus",  className(self)=="DialogWindow");
	IF className(self)=="DialogWindow" THEN
		s_(self, "slot", 1);
	END;
END;

Widget_Close(self)
BEGIN
	s_(self, "open", 0);
END;

Widget_AddWidget(self, wdgt)
BEGIN
	s_(self, "lobj", CONCAT(g_(self, "lobj"), wdgt));
	LOCAL x:= g_(self,"x");
	LOCAL y:= g_(self,"y");
	CASE
		IF NOT(className(self) == "MainWindow" OR className(self) == "DialogWindow") THEN
			def(wdgt, "Move", {x+g_(wdgt,"x")+2, y+g_(wdgt,"y")+2});
		END;
		IF className(wdgt) == "DialogWindow" THEN
			def(wdgt, "Move", {x+(g_(self,"w")-g_(wdgt,"w"))/2, y+19+(g_(self,"h")-19-g_(wdgt,"h"))/2});
		END;
		def(wdgt, "Move", {x+g_(wdgt,"x"), y+g_(wdgt,"y")+20});
	END;
END;

Widget_setParent(self, parent)
BEGIN
	Widget_AddWidget(parent, self);
END;

Widget_setLayout(self, array, prop)
BEGIN
	LOCAL px:= g_(self,"x");
	LOCAL py:= g_(self,"y");
	LOCAL w, h;
	IF isList(prop) THEN
		px:= px + prop(1);   py:= py + prop(2);
		w:= IFTE(prop(3), prop(3), g_(self,"x") + g_(self,"w") - px - 2 - prop(5));
		h:= IFTE(prop(4), prop(4), g_(self,"y") + g_(self,"h") - py - 2 - prop(6));
	ELSE
		w:= g_(self, "w")-2;   h:= g_(self, "h")-2;
	END;
	
	IF className(self) == "MainWindow" OR className(self) == "DialogWindow" THEN
		py:= py+19;  h:= h-19;
	END;
	
	LOCAL i, j, dx, dy; // ΣLIST
	LOCAL tw, th;
	FOR i:=1 TO SIZE(array) DO
		IF isList(array(i,1))
		THEN
			th:= array(i,0)*h;
			dx:= 0;
			FOR j:=1 TO SIZE(array(i))-1 DO
				tw:= IFTE(array(i,j,3), array(i,j,3)*w, g_(array(i,j,1), "w")+3);
				Widget_OnLayout(array(i,j), px+dx, py+dy, th, tw);
				dx:= dx + tw;
			END;
		ELSE
			th:= array(i,3)*h;
			Widget_OnLayout(array(i), px+0, py+dy, th, w);
		END;
		dy:= dy + th;
	END;
END;

Widget_OnLayout(obj, dx, dy, th, w)
BEGIN
	LOCAL x, y;
	IF obj(2) == "fit" THEN
		LOCAL h;
		LOCAL dtx:= IFTE(isList(obj(5)), obj(5), {0,0});
		LOCAL dty:= IFTE(isList(obj(4)), obj(4), {0,0});
		LOCAL name:= className(obj(1));
		x:= dx+2+dtx(1);
		CASE
			IF name == "GroupBox" OR name == "RadioButton" THEN
				y:= dy+9+2+dty(1);
				h:= th-9-2;
			END;
			IF name == "TabWidget" THEN
				y:= dy+20+2+dty(1);
				h:= th-20-2;
				LOCAL i, lobj:= g_(obj(1), "lobj");
				FOR i:=1 TO SIZE(lobj) DO
					def(lobj(i), "Size", {w-2+dtx(1)-dtx(2), h-dty(1)-dty(2)});
				END;
			END;
			IF name == "TableWidget" THEN
				y:= dy+2+dty(1);
				h:= g_(obj(1), "h");
			END;
			y:= dy+2+dty(1);
			h:= th-2;
		END;
		def(obj(1), "Size", {w-2-dtx(1)-dtx(2), h-dty(1)-dty(2)});
	ELSE
		CASE
			IF TYPE(obj(4)) == 0 THEN
				y:= dy + obj(4);
			END;
			IF obj(4) == "top" THEN
				y:= dy + 2;
			END;
			IF obj(4) == "mid" THEN
				y:= dy + (th - g_(obj(1),"h"))/2 + 1;
			END;
			IF obj(4) == "bot" THEN
				y:= dy + th - g_(obj(1),"h");
			END;
		END;
		CASE
			IF TYPE(obj(5)) == 0 THEN
				x:= dx + obj(5);
			END;
			IF obj(5) == "left" THEN
				x:= dx + 2;
			END;
			IF obj(5) == "mid" THEN
				x:= dx + (w - g_(obj(1),"w"))/2 + 1;
			END;
			IF obj(5) == "right" THEN
				x:= dx + w - g_(obj(1),"w"); // - 2;
			END;
		END;
	END;
	def(obj(1), "Move", {x, y});
END;

Widget_Plot(self)
BEGIN
	s_(self, "slot", 0);
	IF g_(self, "open") THEN
		LOCAL x:= g_(self, "x");
		LOCAL y:= g_(self, "y");
		LOCAL w:= g_(self, "w");
		LOCAL h:= g_(self, "h");
		LOCAL color_bg:= g_(self, "color_bg");
		LOCAL color_bo:= g_(self, "color_bo");
		
		//background
		fillRect(x, y, w, h, color_bo, color_bg);
		
		//Txt
		Widget_PlotText(self, x, y);
		
		//widgets
		IFERR
			Widget_PlotWidgets(self);
		THEN
		END;
	END;
END;

Widget_PlotText(self, x, y)
BEGIN
	// { {"abc", x, y, size, just, color}, {"Hola", 10, 10, 3, "mid", {0,0,0}} }
	LOCAL ltxt:= g_(self, "ltxt");
	LOCAL i, px, py;
	LOCAL t, xt, yt, st, jt, color;
	FOR i:=1 TO SIZE(ltxt) DO
		t:=  ltxt(i,1);
		xt:= ltxt(i,2);
		yt:= ltxt(i,3);
		st:= ltxt(i,4);
		jt:= ltxt(i,5);
		color:= ltxt(i,6);
		px:= x + xt + IFTE(jt == "mid", -wText(t,st)/2, IFTE(jt == "right", -wText(t,st)));
		py:= y + yt;
		drawText(t, px, py, st, color);
	END;
END;

Widget_PlotWidgets(self)
BEGIN
	LOCAL i, k:=0, obj:= g_(self, "lobj");
	LOCAL flag:= Widget_Priority(obj);
	FOR i:=1 TO SIZE(obj) DO
		IF i <> flag THEN
			def(obj(i), "Plot", Nill);
		END;
	END;
	IF flag THEN def(obj(flag), "Plot", Nill); END;
END;

Widget_cotrains(xm, ym, x, y, w, h)
BEGIN
	RETURN (x<xm<x+w) AND (y<ym<y+h);
END;

Widget_mouseDown(self, xm, ym)
BEGIN
	IF g_(self, "open") AND NOT g_(self, "slot") THEN
		LOCAL x:= g_(self, "x");
		LOCAL y:= g_(self, "y");
		LOCAL w:= g_(self, "w");
		LOCAL h:= g_(self, "h");
		LOCAL i, obj:= g_(self, "lobj");
		LOCAL flag:= Widget_Priority(obj);
		s_(self, "focus", Widget_cotrains(xm, ym, x, y, w, h));
		
		IF flag THEN
			def(obj(flag), "mouseDown", {xm, ym});
			IF NOT g_(obj(flag), "focus") THEN
				FOR i:=1 TO SIZE(obj) DO
					IF i <> flag AND NOT g_(obj(i), "slot") THEN
						def(obj(i), "mouseDown", {xm, ym});
					END;
				END;
			END;
		ELSE
			FOR i:=1 TO SIZE(obj) DO
				IF NOT g_(obj(i), "slot") THEN
					def(obj(i), "mouseDown", {xm, ym});
				END;
			END;
		END;
		FOR i:=1 TO SIZE(obj) DO
			IF g_(obj(i), "focus") THEN
				s_(self, "focus", 1);
				IF NOT g_(obj(i), "open") THEN
					s_(obj(i), "focus", 0);
				END;
				BREAK;
			END;
		END;
	END;
END;

Widget_Priority(obj)
BEGIN
	LOCAL i, na, out;
	FOR i:=1 TO SIZE(obj) DO
		na:= className(obj(i));
		IF g_(obj(i),"open") AND g_(obj(i),"focus") AND na=="DialogWindow" THEN
			RETURN i;
		END;
	END;
	FOR i:=1 TO SIZE(obj) DO
		na:= className(obj(i));
		IF g_(obj(i),"open") AND g_(obj(i),"focus") AND (na=="ComboBox" OR na=="MenuBar" OR na=="TabWidget") THEN
			RETURN i;
		END;
	END;
END;

Widget_getKey(self, action)
BEGIN
	IF g_(self, "focus") AND g_(self, "open") THEN
		LOCAL i, obj:= g_(self, "lobj");
		FOR i:=1 TO SIZE(obj) DO
			IFERR
				def(obj(i), "getKey", {action});
			THEN
			END;
		END;
	END;
END;

Widget_delete(self)
BEGIN
	IF g_(self, "focus") AND g_(self, "open") THEN
		LOCAL i, obj:= g_(self, "lobj");
		FOR i:=1 TO SIZE(obj) DO
			IFERR
				def(obj(i), "delete", Nill);
			THEN
			END;
		END;
	END;
END;

Widget_mouseMove(self, action)
BEGIN
	IF g_(self, "focus") AND g_(self, "open") THEN
		LOCAL i, obj:= g_(self, "lobj");
		FOR i:=1 TO SIZE(obj) DO
			IFERR
				def(obj(i), "mouseMove", {action});
			THEN
			END;
		END;
	END;
END;

Widget_mouseUp(self)
BEGIN
	IF g_(self, "focus") AND g_(self, "open") THEN
		LOCAL i, obj:= g_(self, "lobj");
		FOR i:=1 TO SIZE(obj) DO
			IFERR
				def(obj(i), "mouseUp", Nill);
			THEN
			END;
		END;
	END;
END;

Widget_mouseClick(self, xm, ym)
BEGIN
	IF g_(self, "focus") AND g_(self, "open") THEN
		LOCAL i, obj:= g_(self, "lobj");
		FOR i:=1 TO SIZE(obj) DO
			IFERR
				def(obj(i), "mouseDown", {xm, ym});
			THEN
			END;
		END;
	END;
END;

Widget_mouseStretch(self)
BEGIN

END;

Widget_mouseRotate(self)
BEGIN

END;

Widget_mouseLongClick(self)
BEGIN
	IF g_(self, "focus") AND g_(self, "open") THEN
		LOCAL i, obj:= g_(self, "lobj");
		FOR i:=1 TO SIZE(obj) DO
			IFERR
				def(obj(i), "mouseLongClick", Nill);
			THEN
			END;
		END;
	END;
END;

Widget_arrowUp(self, prev)
BEGIN
	IF g_(self, "focus") AND g_(self, "open") THEN
		LOCAL i, obj:= g_(self, "lobj");
		FOR i:=1 TO SIZE(obj) DO
			IFERR
				def(obj(i), "arrowUp", {prev});
			THEN
			END;
		END;
	END;
END;

Widget_arrowDown(self, prev)
BEGIN
	IF g_(self, "focus") AND g_(self, "open") THEN
		LOCAL i, obj:= g_(self, "lobj");
		FOR i:=1 TO SIZE(obj) DO
			IFERR
				def(obj(i), "arrowDown", {prev});
			THEN
			END;
		END;
	END;
END;

Widget_arrowLeft(self, prev)
BEGIN
	IF g_(self, "focus") AND g_(self, "open") THEN
		LOCAL i, obj:= g_(self, "lobj");
		FOR i:=1 TO SIZE(obj) DO
			IFERR
				def(obj(i), "arrowLeft", {prev});
			THEN
			END;
		END;
	END;
END;

Widget_arrowRight(self, prev)
BEGIN
	IF g_(self, "focus") AND g_(self, "open") THEN
		LOCAL i, obj:= g_(self, "lobj");
		FOR i:=1 TO SIZE(obj) DO
			IFERR
				def(obj(i), "arrowRight", {prev});
			THEN
			END;
		END;
	END;
END;

Widget_escape(self)
BEGIN
	IF g_(self, "focus") AND g_(self, "open") THEN
		LOCAL i, obj:= g_(self, "lobj");
		FOR i:=1 TO SIZE(obj) DO
			IFERR
				def(obj(i), "escape", Nill);
			THEN
			END;
		END;
	END;
END;

Widget_enter(self)
BEGIN
	IF g_(self, "focus") AND g_(self, "open") THEN
		LOCAL i, obj:= g_(self, "lobj");
		FOR i:=1 TO SIZE(obj) DO
			IFERR
				def(obj(i), "enter", Nill);
			THEN
			END;
		END;
	END;
END;

Widget_alphaKey(self)
BEGIN
	IF g_(self, "focus") AND g_(self, "open") THEN
		LOCAL i, obj:= g_(self, "lobj");
		FOR i:=1 TO SIZE(obj) DO
			IFERR
				def(obj(i), "alphaKey", Nill);
			THEN
			END;
		END;
	END;
END;

Widget_shift(self)
BEGIN

END;

Widget_Connect(self, signal, args)
BEGIN
	// {'function'} {self, function, args}
	IF NOT POS(g_(self,"signal"+signal), args) THEN
		s_(self,"signal"+signal, CONCAT(g_(self,"signal"+signal), {args}));
	END;
END;

Widget_Signal(signal)
BEGIN
	EVAL(signal);
END;


//******************************** MAIN WINDOW CLASS *************************
MainWindow_Class()
BEGIN
	init(
		"MainWindow",
		{
			{"x", 0},
			{"y", 0},
			{"w", 319},
			{"h", 239},
			{"ltxt", {}},
			{"icon", "∇"},
			{"title", "MainWindow"},
			{"lobj", {}},
			{"fobj", 0},
			{"open", 1},
			{"focus", 1},
			{"slot", 0},
			{"signalIsClicked", {}},
			{"color_bg", {200,200,200}},
			{"color_bo", {200,200,200}},
			{"color_la", {220,220,220}},
			{"color_bgt", {54,54,54}}
		},
		{"setTitle", "BgColor", "Plot", "PlotTitleBar", "mouseDown"},
		"Widget"
	);
END;

MainWindow_setTitle(self, title)
BEGIN
	s_(self, "title", title);
END;

MainWindow_BgColor(self, color)
BEGIN
	s_(self, "color_bg", color);
	s_(self, "color_bo", color);
END;

MainWindow_Plot(self)
BEGIN
	s_(self, "slot", 0);
	IF g_(self, "open") THEN
		LOCAL x:= g_(self, "x");
		LOCAL y:= g_(self, "y");
		LOCAL w:= g_(self, "w");
		LOCAL h:= g_(self, "h");
		LOCAL color_bg:= g_(self, "color_bg");
		LOCAL color_bo:= g_(self, "color_bo");
		
		//background
		fillRect(x, y, w, h, color_bo, color_bg);
		
		//Txt
		Widget_PlotText(self, x, y);
		
		//TitleBar
		MainWindow_PlotTitleBar(self, x+1, y, w-2, color_bg, color_bo);
		
		//widgets
		IFERR
			Widget_PlotWidgets(self);
		THEN
		END;
	END;
END;

MainWindow_PlotTitleBar(self, x, y, w, color_bg, color_bo)
BEGIN
	LOCAL th:= 19;
	LOCAL tw:= 24;
	LOCAL color_la:= g_(self, "color_la");
	// Background title × ℹ
	fillRect(x-1, y, w, th, color_bo, g_(self, "color_bgt"));
	
	// Icon
	LOCAL icon:= g_(self, "icon");
	IF SIZE(icon)>4 THEN
		LOCAL n:= SIZE(icon);
		IF icon(n-3,4) == ".png" THEN
			G3:=AFiles(icon);
			LOCAL wg:= GROBW_P(G3);
			LOCAL hg:= GROBH_P(G3);
			LOCAL posx:= x + (tw - wg)/2;
			LOCAL posy:= y + (th - hg)/2 + 1;
			BLIT_P(G1, {posx, posy}, {posx+wg, posy+hg}, G3, {0,0}, {wg, hg});
		END;
	ELSE
		drawText(icon, x+5, y+2, 3, color_la);
	END;
	
	// Title
	drawText(g_(self, "title"), x+tw+4, y+2, 3, color_la);
	
	// Buttons
	fillRect(x+w-tw+1, y, tw, th, color_bo, {240,90,110});
	drawText("×", x+w-tw+(tw-wText("×",4))/2+2, y, 4, {0,0,0});
END;

MainWindow_mouseDown(self, xm, ym)
BEGIN
	IF g_(self, "open") AND NOT g_(self, "slot") THEN
		LOCAL x:= g_(self, "x");
		LOCAL y:= g_(self, "y");
		LOCAL w:= g_(self, "w");
		LOCAL h:= g_(self, "h");
		Widget_mouseDown(self, xm, ym);
		s_(self, "open", NOT(Widget_cotrains(xm, ym, x+w-24+1, y, 24, 19)));
	END;
END;


//********************************* DIALOG WINDOW CLASS ****************************
DialogWindow_Class()
BEGIN
	init(
		"DialogWindow",
		{
			{"x", (320-200)/2},
			{"y", (240-100)/2},
			{"w", 200},
			{"h", 100},
			{"ltxt", {}},
			{"icon", "∇"},
			{"title", "DialogWindow"},
			{"movef", 0},
			{"lobj", {}},
			{"fobj", 0},
			{"open", 0},
			{"focus", 0},
			{"slot", 0},
			{"signalIsClicked", {}},
			{"color_bg", {200,200,200}},
			{"color_bo", {50,50,50}},
			{"color_la", {220,220,220}},
			{"color_bgt", {54,54,54}}
		},
		{"mouseDown", "mouseMove"},
		{"MainWindow", "Widget"}
	);
END;

DialogWindow_mouseDown(self, xm, ym)
BEGIN
	IF g_(self, "open") AND NOT g_(self, "slot") THEN
		LOCAL x:= g_(self, "x");
		LOCAL y:= g_(self, "y");
		LOCAL w:= g_(self, "w");
		LOCAL h:= g_(self, "h");
		Widget_mouseDown(self, xm, ym);
		LOCAL i, flag, obj:= g_(self, "lobj");
		FOR i:=1 TO SIZE(obj) DO
			IF className(obj(i))=="DialogWindow" AND g_(obj(i), "open") THEN
				flag:= 1;
				BREAK;
			END;
		END;
		s_(self, "open",  g_(self, "focus") AND NOT(Widget_cotrains(xm, ym, x+w-24+1, y, 24, 19)));
		s_(self, "movef", Widget_cotrains(xm, ym, x, y, x+w-24, 19) AND NOT flag);
	END;
END;

DialogWindow_mouseMove(self, action)
BEGIN
	IF g_(self, "open") THEN
		IF g_(self, "movef") THEN
			LOCAL x:= g_(self, "x");
			LOCAL y:= g_(self, "y");
			LOCAL w:= g_(self, "w");
			LOCAL h:= g_(self, "h");
			LOCAL dx:= IFTE(action(2,1)==2, 0, action(1,2) - action(2,2));
			LOCAL dy:= IFTE(action(2,1)==2, 0, action(1,3) - action(2,3));
			def(self, "Move", {clamp(x+dx, 0, 320-w), clamp(y+dy, 0, 240-h)});
		ELSE
			LOCAL i, obj:= g_(self, "lobj");
			FOR i:=1 TO SIZE(obj) DO
				IFERR
					def(obj(i), "mouseMove", {action});
				THEN
				END;
			END;
		END;
	END;
END;


//******************************** TAB WIDGET CLASS *************************
TabWidget_Class()
BEGIN
	init(
		"TabWidget",
		{
			{"x", 0},
			{"y", 0},
			{"w", 300},
			{"h", 200},
			{"lh", {}},
			{"dropd", 1},
			{"drops", 0},
			{"lobj", {}},
			{"fobj", 1},
			{"open", 1},
			{"focus", 0},
			{"slot", 0},
			{"signalIsClicked", {}},
			{"signalIndexChanged", {}},
			{"color_bg", {200,200,200}},
			{"color_bo", {120,120,120}},
			{"color_la", {0,0,0}}
		},
		{"AddWidget", "setHeaders", "setTabIndex",
		"Plot", "PlotCurrentWidget", "PlotHeaders",
		"mouseDown", "ItemPicked"},
		"Widget"
	);
END;

TabWidget_AddWidget(self, wdgt)
BEGIN
	Obj(wdgt, Widget);
	s_(self, "lobj", CONCAT(g_(self, "lobj"), wdgt));
	s_(wdgt, "x", g_(self, "x"));
	s_(wdgt, "y", g_(self, "y"));
	s_(wdgt, "w", g_(self, "w"));
	s_(wdgt, "h", g_(self, "h"));
	s_(wdgt, "color_bo", g_(self, "color_bo"));
	s_(wdgt, "color_bg", g_(self, "color_bg"));
END;

TabWidget_setHeaders(self, lista)
BEGIN
	s_(self, "lh", lista);
END;

TabWidget_setTabIndex(self, index)
BEGIN
	LOCAL prev:= g_(self, "fobj");
	LOCAL obj:= g_(self, "lobj");
	
	// Close prev
	s_(obj(prev), "open", 0);
	
	// Open index
	s_(obj(index), "open", 1);
	s_(self, "fobj", index);
END;

TabWidget_Plot(self)
BEGIN
	s_(self, "slot", 0);
	IF g_(self, "open") THEN
		LOCAL x:= g_(self, "x");
		LOCAL y:= g_(self, "y");
		LOCAL w:= g_(self, "w");
		LOCAL h:= g_(self, "h");
		LOCAL color_bg:= g_(self, "color_bg");
		LOCAL color_bo:= g_(self, "color_bo");
		LOCAL color_la:= g_(self, "color_la");
		
		IFERR
			TabWidget_PlotCurrentWidget(self);
			TabWidget_PlotHeaders(self, x, y, color_bo, color_bg, color_la);
		THEN
		END;
	END;
END;

TabWidget_PlotHeaders(self, x, y, color_bo, color_bg, color_la)
BEGIN
	LOCAL i, wh, dx:= 0, obj:= g_(self, "lh");
	LOCAL posx, posy;
	FOR i:=1 TO SIZE(obj) DO
		wh:= MAX(wText(obj(i),3) + 8, 25);
		IF i == g_(self, "fobj") THEN
			fillRect(dx + x, y-20, wh, 20, color_bo, color_bg);
			IF g_(self, "dropd") THEN
				drawLine1(dx + x + 1, y, wh - 2, 0, color_bg);
			END;
		ELSE
			fillRect(dx + x, y-19, wh, 19, color_bo, color_bg);
		END;
		
		posx:= x + dx + (wh - wText(obj(i),3))/2 + 1 ;
		posy:= y - 17;
		drawText(obj(i), posx, posy, 3, color_la);
		dx:= dx + wh;
	END;
END;

TabWidget_PlotCurrentWidget(self)
BEGIN
	LOCAL obj:= g_(self, "lobj");
	def(obj(g_(self,"fobj")), "Plot", Nill);
END;

TabWidget_mouseDown(self, xm, ym)
BEGIN
	LOCAL x:= g_(self, "x");
	LOCAL y:= g_(self, "y");
	LOCAL w:= g_(self, "w");
	LOCAL h:= g_(self, "h");
	LOCAL fobj:= g_(self, "fobj");
	IF g_(self, "dropd") THEN
		s_(self, "focus", Widget_cotrains(xm, ym, x, y, w, h));
		s_(self, "dropd", 1);
	END;
	TabWidget_ItemPicked(self, xm, ym, x, y);
	
	LOCAL obj:= g_(self, "lobj");
	Widget_mouseDown(obj(g_(self,"fobj")), xm, ym);
	IF NOT g_(self, "focus") AND g_(self, "drops") THEN
		s_(self, "dropd", 0);
		s_(obj(g_(self,"fobj")), "open", 0);
	END;
	
	// SIGNALS
	IF g_(self, "focus") THEN
		Widget_Signal(g_(self, "signalIsClicked"));
	END;
	IF fobj <> g_(self,"fobj") THEN
		Widget_Signal(g_(self, "signalIndexChanged"));
	END;
END;

TabWidget_ItemPicked(self, xm, ym, x, y)
BEGIN
	LOCAL i, wh, dx:= 0, wobj:= g_(self, "lh");
	LOCAL obj:= g_(self, "lobj");
	FOR i:=1 TO SIZE(wobj) DO
		wh:= MAX(wText(wobj(i),3) + 8, 25);
		IF Widget_cotrains(xm, ym, dx + x, y-19, wh, 20) THEN
			s_(obj(g_(self,"fobj")), "open", 0);
			s_(self, "fobj", i);
			s_(obj(i), "focus", 1);
			s_(obj(i), "open", 1);
			s_(self, "focus", 1);
			s_(self, "dropd", 1);
			BREAK;
		END;
		dx:= dx + wh;
	END;
END;


//******************************** GROUP BOX CLASS *************************
GroupBox_Class()
BEGIN
	init(
		"GroupBox",
		{
			{"x", 0},
			{"y", 0},
			{"w", 320},
			{"h", 240},
			{"label", "GroupBox"},
			{"ltxt", {}},
			{"lobj", {}},
			{"fobj", 0},
			{"open", 1},
			{"focus", 0},
			{"slot", 0},
			{"signalIsClicked", {}},
			{"color_bg", {200,200,200}},
			{"color_bo", {120,120,120}},
			{"color_la", {0,0,0}}
		},
		{"setLabel", "Plot"},
		"Widget"
	);
END;

GroupBox_setLabel(self, lab)
BEGIN
	s_(self, "label", lab);
END;

GroupBox_Plot(self)
BEGIN
	s_(self, "slot", 0);
	IF g_(self, "open") THEN
		LOCAL x:= g_(self, "x");
		LOCAL y:= g_(self, "y");
		LOCAL w:= g_(self, "w");
		LOCAL h:= g_(self, "h");
		LOCAL label:= g_(self, "label");
		LOCAL color_bg:= g_(self, "color_bg");
		LOCAL color_bo:= g_(self, "color_bo");
		LOCAL color_la:= g_(self, "color_la");
		
		// Background
		fillRect(x, y, w, h, color_bo, color_bg);
		
		// Label
		IF NOT(label=="") THEN
			drawLine1(x+5, y, wText(label,3) + 10, 0, color_bg);
			drawText(label, x+10, y-10, 3, color_la);
		END;
		
		// Txt
		Widget_PlotText(self, x, y);
		
		// Widgets
		IFERR Widget_PlotWidgets(self); THEN END;
	END;
END;


//******************************** MENU BAR CLASS *************************
MenuBar_Class()
BEGIN
	init(
		"MenuBar",
		{
			{"x", 0},
			{"y", 0},
			{"w", 320},
			{"h", 20},
			{"ltxt", {}},
			{"px", 0},
			{"lobj", {}},
			{"fobj", 0},
			{"open", 1},
			{"focus", 0},
			{"slot", 0},
			{"signalIsClicked", {}},
			{"color_bg", {200,200,200}},
			{"color_bo", {180,180,180}},
			{"color_la", {0,0,0}}
		},
		{"AddWidget"},
		"Widget"
	);
END;

MenuBar_AddWidget(self, wdgt, label, list)
BEGIN
	LOCAL wl, w;
	IF SIZE(label)>4 THEN
		LOCAL n:= SIZE(label);
		IF label(n-3,4) == ".png" THEN
			G3:=AFiles(label);
			w:= GROBW_P(G3) + 8;
		ELSE
			w:= wText(label,3) + 8;
		END;
	ELSE
		w:= wText(label,3) + 8;
	END;
	LOCAL px:= g_(self, "px");
	LOCAL dy:= IFTE(self=="MainWindow", 19);
	IF isList(list) THEN
		Obj(wdgt, ComboBox);
		s_(wdgt, "title", label);
		s_(wdgt, "color_lla", {40,40,40});
		def(wdgt, "setListDrop", {0});
		ComboBox_setList(wdgt, list);
		ComboBox_setDimView(wdgt, SIZE(list));
		LOCAL i;
		FOR i:=1 TO SIZE(list) DO
			wl:= IFTE(wl<wText(list(i),3)+6, wText(list(i),3)+6,wl);
		END;
	ELSE
		Obj(wdgt, Button);
		s_(wdgt, "label", label);
	END;
	def(wdgt, "Move", {g_(self,"x")+g_(wdgt,"x")+px, g_(self,"y")+g_(wdgt,"y")+dy});
	s_(wdgt, "w", w); s_(wdgt, "h", g_(self, "h"));
	s_(wdgt, "wl", MAX(w, wl));
	s_(wdgt, "color_bo", g_(self, "color_bo"));
	s_(wdgt, "color_bg", g_(self, "color_bg"));
	s_(wdgt, "color_la", g_(self, "color_la"));
	
	s_(self, "lobj", CONCAT(g_(self, "lobj"), wdgt));
	s_(self, "w",  px + w - g_(self, "x"));
	s_(self, "px", px + w);
END;


//********************************** LINE EDIT CLASS ***********************************
LineEdit_Class()
BEGIN
	init(
		"LineEdit",
		{
			{"x", 0},
			{"y", 0},
			{"w", 80},
			{"h", 20},
			{"pos", 0},
			{"label", ""},
			{"text", ""},
			{"type", "text"},
			{"focus", 0},
			{"open",  1},
			{"slot",  0},
			{"signalIsClicked", {}},
			{"signalEnterKey", {}},
			{"color_bg", {235,235,235}},
			{"color_bo", {0,0,0}},
			{"color_boe", gColor("blue1")},
			{"color_txt", {0,0,0}}
		},
		{"Move", "Size", "Label", "Text",
		"Get", "setTypeData", "Plot",
		"mouseDown", "getKey", "delete", "enter", "arrowLeft", "arrowRight"},
		"Widget"
	);
END;

LineEdit_Move(self, x, y)
BEGIN
	s_(self, "x", x);
	s_(self, "y", y);
END;

LineEdit_Size(self, w, h)
BEGIN
	s_(self, "w", w);
	s_(self, "h", h);
END;

LineEdit_Label(self, label)
BEGIN
	s_(self, "label", label);
END;

LineEdit_Text(self, label)
BEGIN
	s_(self, "text", IFTE(TYPE(label)==2, label, STRING(label)));
END;

LineEdit_setTypeData(self, typ)
BEGIN
	s_(self, "type", typ);
END;

LineEdit_Get(self)
BEGIN
	LOCAL typ:= g_(self, "type");
	IF typ == "text" THEN
		RETURN g_(self, "text");
	END;
	IF typ == "number" THEN
		LOCAL val:= g_(self, "text");
		RETURN IFTE(val == "", 0, EXPR(val));
	END;
	RETURN "";
END;

LineEdit_Plot(self)
BEGIN
	s_(self, "slot", 0);
	IF g_(self, "open") THEN
		LOCAL x:= g_(self, "x");
		LOCAL y:= g_(self, "y");
		LOCAL w:= g_(self, "w");
		LOCAL h:= g_(self, "h");
		LOCAL label:= g_(self, "label");
		LOCAL text:= g_(self, "text");
		LOCAL color_bg:= g_(self, "color_bg");
		LOCAL color_bo:= g_(self, "color_bo");
		LOCAL color_la:= g_(self, "color_la");
		LOCAL focus:= g_(self,"focus");

		//border - background
		fillRect(x, y, w, h, IFTE(focus,g_(self,"color_boe"),color_bo), IFTE(focus,iColor(color_bg,5),color_bg));
		
		//label
		LOCAL val:= wVal(label, w, 3);
		LOCAL posx:= x - val(2) - 3;
		LOCAL posy:= y + (h - 10)/2 - 2;
		drawText(val(1), posx, posy, 3, color_la);
		
		//text
		LOCAL p:= g_(self, "pos");
		LOCAL text_:= IFTE(text=="", "_", SUBo(text, 1, p) + "_" + SUBo(text,p+1,SIZE(text)));
		val:= IFTE(focus, wVali(text_,w,3), wVal(text,w,3));
		posx:= x +  w - val(2) - 2;
		posy:= y + (h - 10)/2  - 2;
		drawText(val(1), posx, posy, 3, color_la);
	END;
END;

LineEdit_mouseDown(self, xm, ym)
BEGIN
	LOCAL x:= g_(self, "x");
	LOCAL y:= g_(self, "y");
	LOCAL w:= g_(self, "w");
	LOCAL h:= g_(self, "h");
	LOCAL focus:= g_(self, "focus");
	s_(self, "focus", Widget_cotrains(xm, ym, x, y, w, h));
	IF NOT focus AND g_(self, "focus") THEN
		s_(self, "pos", MAX(1, SIZE(g_(self, "text"))));
	END;
	
	// Signal
	IF g_(self, "focus") then
		Widget_Signal(g_(self, "signalIsClicked"));
	END;
END;

LineEdit_getKey(self, action)
BEGIN
	IF g_(self, "focus") THEN
		s_(self, "text", g_(self, "text") + getK(action(1)));
		s_(self, "pos", MAX(1, SIZE(g_(self, "text"))));
	END;
END;

LineEdit_delete(self)
BEGIN
	LOCAL text_:= g_(self, "text");
	IF g_(self, "focus") AND SIZE(text_) AND g_(self, "pos") THEN		
		s_(self, "text", SUBe(text_, g_(self,"pos")));
		s_(self, "pos",  MAX(0, g_(self,"pos")-1));
	END;
END;

LineEdit_enter(self)
BEGIN
	IF g_(self, "focus") THEN
		s_(self, "focus", 0);
		
		// Signal
		Widget_Signal(g_(self, "signalEnterKey"));
	END;
END;

LineEdit_arrowLeft(self, prev)
BEGIN
	IF g_(self, "focus") THEN
		s_(self, "pos", MAX(0, g_(self, "pos")-1));
	END;
END;

LineEdit_arrowRight(self, prev)
BEGIN
	IF g_(self, "focus") THEN
		s_(self, "pos", MIN(SIZE(g_(self, "text")), g_(self, "pos")+1));
	END;
END;


//******************************** BUTTON CLASS ********************************
Button_Class()
BEGIN
	init(
		"Button",
		{
			{"x", 0},
			{"y", 0},
			{"w", 50},
			{"h", 20},
			{"label", "Button"},
			{"focus", 0},
			{"open", 1},
			{"lobj", {}},
			{"fobj", 0},
			{"slot", 0},
			{"signalIsClicked", {}},
			{"color_bg", {180,180,180}},
			{"color_bo", {100,100,100}},
			{"color_la", {0,0,0}}
		},
		{"Move", "Size", "Label", "Color", "Plot", 
		"mouseDown", "getKey"},
		"Widget"
	);
END;

Button_Move(self, x, y)
BEGIN
	s_(self, "x", x);
	s_(self, "y", y);
END;

Button_Size(self, w, h)
BEGIN
	s_(self, "w", w);
	s_(self, "h", h);
END;

Button_Label(self, label)
BEGIN
	s_(self, "label", label);
END;

Button_Color(self, label, color)
BEGIN
	s_(self, "color_"+label, color);
END;

Button_Plot(self)
BEGIN
	s_(self, "slot", 0);
	IF g_(self, "open") THEN
		LOCAL x:= g_(self, "x");
		LOCAL y:= g_(self, "y");
		LOCAL w:= g_(self, "w");
		LOCAL h:= g_(self, "h");
		LOCAL label:= g_(self, "label");
		LOCAL color_bg:= g_(self, "color_bg");
		LOCAL color_bo:= g_(self, "color_bo");
		LOCAL color_la:= g_(self, "color_la");

		//border - background
		fillRect(x, y, w, h, color_bo, IFTE(g_(self,"focus"), iColor(color_bg, 30), color_bg));
		
		//label
		IF SIZE(label)>4 THEN
			LOCAL n:= SIZE(label);
			IF label(n-3,4) == ".png" THEN
				G3:=AFiles(label);
				LOCAL wg:= GROBW_P(G3);
				LOCAL hg:= GROBH_P(G3);
				LOCAL posx:= x + (w - wg)/2;
				LOCAL posy:= y + (h - hg)/2 + 1;
				BLIT_P(G1, {posx, posy}, {posx+wg, posy+hg}, G3, {0,0}, {wg, hg});
			ELSE
				LOCAL w_label:= wText(label,3);
				LOCAL posx:= x + (w - w_label)/2;
				LOCAL posy:= y + (h - 10)/2 - 2;
				drawText(label, posx, posy, 3, color_la);
			END;
		ELSE
			LOCAL w_label:= wText(label,3);
			LOCAL posx:= x + (w - w_label)/2;
			LOCAL posy:= y + (h - 10)/2 - 2;
			drawText(label, posx, posy, 3, color_la);
		END;
	END;
END;

Button_mouseDown(self, xm, ym)
BEGIN
	LOCAL x:= g_(self, "x");
	LOCAL y:= g_(self, "y");
	LOCAL w:= g_(self, "w");
	LOCAL h:= g_(self, "h");
	s_(self, "focus", Widget_cotrains(xm, ym, x, y, w, h));
	IF g_(self, "focus") THEN
		Widget_Signal(g_(self, "signalIsClicked"));
	END;
END;


//************************** CHECKBOX CLASS **************************
CheckBox_Class()
BEGIN
	init(
		"CheckBox",
		{
			{"x", 0},
			{"y", 0},
			{"w", 20},
			{"h", 20},
			{"mark", "✓"},
			{"status", 1},
			{"focus", 0},
			{"open", 1},
			{"lobj", {}},
			{"fobj", 0},
			{"slot", 0},
			{"signalStatusChanged", {}},
			{"color_bg", {225,225,225}},
			{"color_bo", {0,0,0}},
			{"color_mark", {0,0,0}}
		},
		{"Move", "Size", "Mark", "Color", "Plot",
		"mouseDown",
		"Connect"},
		Nill
	);
END;

CheckBox_Move(self, x, y)
BEGIN
	s_(self, "x", x);
	s_(self, "y", y);
END;

CheckBox_Size(self, d)
BEGIN
	s_(self, "w", d);
	s_(self, "h", d);
END;

CheckBox_Mark(self, mark)
BEGIN
	s_(self, "mark", mark);
END;

CheckBox_Color(self, label, color)
BEGIN
	s_(self, "color_"+label, color);
END;

CheckBox_Plot(self)
BEGIN
	s_(self, "slot", 0);
	IF g_(self, "open") THEN
		LOCAL x:= g_(self, "x");
		LOCAL y:= g_(self, "y");
		LOCAL w:= g_(self, "w");
		LOCAL h:= g_(self, "h");
		LOCAL mark:= g_(self, "mark");
		LOCAL color_bg:= g_(self, "color_bg");
		LOCAL color_bo:= g_(self, "color_bo");
		LOCAL color_mark:= g_(self, "color_mark");

		// border - background
		fillRect(x, y, w, h, color_bo, color_bg);
		
		// mark
		IF g_(self, "status") THEN
			LOCAL w_mark:= wText(mark,3);
			LOCAL posx:= x + (w - w_mark)/2 + 1;
			LOCAL posy:= y + (h - 10)/2 - 2;
			drawText(mark, posx, posy, 3, color_mark);
		END;
	END;
END;

CheckBox_Connect(self, signal, args)
BEGIN
	Widget_Connect(self, signal, args);
END;

CheckBox_mouseDown(self, xm, ym)
BEGIN
	LOCAL x:= g_(self, "x");
	LOCAL y:= g_(self, "y");
	LOCAL w:= g_(self, "w");
	LOCAL h:= g_(self, "h");
	
	IF Widget_cotrains(xm, ym, x, y, w, h) THEN
		s_(self, "status", NOT(g_(self, "status")));
		s_(self, "focus", 1);
		Widget_Signal(g_(self, "signalStatusChanged"));
	ELSE
		s_(self, "focus", 0);
	END;
END;


//************************** RADIO BUTTON CLASS **************************
RadioButton_Class()
BEGIN
	init(
		"RadioButton",
		{
			{"x", 0},
			{"y", 0},
			{"w", 150},
			{"h", 100},
			{"label", "RadioButton"},
			{"ltxt", {}},
			{"lobj", {}},
			{"fobj", 0},
			{"open", 1},
			{"focus", 0},
			{"slot", 0},
			{"signalIsClicked", {}},
			{"color_bg", {200,200,200}},
			{"color_bo", {120,120,120}},
			{"color_la", {0,0,0}}
		},
		{"AddWidget", "mouseDown"},
		{"GroupBox", "Widget"}
	);
END;

RadioButton_AddWidget(self, wdgt)
BEGIN
	Widget_AddWidget(self, wdgt);
	s_(wdgt, "status", SIZE(g_(self, "lobj"))==1);
END;

RadioButton_mouseDown(self, xm, ym)
BEGIN
	IF g_(self, "open") AND NOT g_(self, "slot") THEN
		LOCAL x:= g_(self, "x");
		LOCAL y:= g_(self, "y");
		LOCAL w:= g_(self, "w");
		LOCAL h:= g_(self, "h");
		Widget_mouseDown(self, xm, ym);
		IF g_(self, "focus") THEN
			LOCAL i, k, lobj:= g_(self, "lobj");
			FOR i:=1 TO SIZE(lobj) DO
				IF g_(lobj(i), "focus") THEN
					s_(lobj(i), "status", 1);
					k:= i;
					FOR k:=1 TO SIZE(lobj) DO
						IF k<>i THEN
							s_(lobj(k), "status", 0)
						END;
					END;
					BREAK;
				END;
			END;
		END;
	END;
END;


//***************************** SELECTION LIST CLASS ********************************
ComboBox_Class()
BEGIN
	init(
		"ComboBox",
		{
			{"x", 0},
			{"y", 0},
			{"w", 60},
			{"h", 20},
			{"wl", 60},
			{"hl", 18},
			{"title", "ComboBox"},
			{"list", {"1.","2.","3."}},
			{"fh", 1},
			{"index", 1},
			{"dimview", 3},
			{"dimlist", 3},
			{"dimtemp", {1,3}},
			{"focus", 0},
			{"slot", 0},
			{"signalIndexChanged", {}},
			{"signalCurrentIndex", {}},
			{"signalClosed", {}},
			{"signalLoseFocus", {}},
			{"signalIsClicked", {}},
			{"open",  1},
			{"lobj", {}},
			{"fobj", 0},
			{"dropd", 0},
			{"drops", 1},
			{"sb_w", 15},
			{"sb_he", 7},
			{"color_bg", {190,210,240}},
			{"color_bo", {0,0,0}},
			{"color_la", {0,0,0}},
			{"color_lbg", {210,210,210}},
			{"color_lla", {0,0,0}},
			{"color_pbg", {200,100,255}},
			{"color_sbg", {120,120,120}}
		},
		{"Move","Size","setHeightList","Title","setList",
		"setDimView", "setIndex", "setListDrop", "DimTemp","Color",
		"Plot","PlotHeader","PlotTitle","PlotList",
		"mouseDown", "cotrainsPickItem", "mouseDownPick", "mouseDownScrollBar",
		"arrowDown", "arrowUp", "UpdateDimTemp", "mouseMove",
		"Connect"},
		Nill
	);
END;

ComboBox_Move(self, x, y)
BEGIN
	s_(self, "x", x);
	s_(self, "y", y);
END;

ComboBox_Size(self, w, h)
BEGIN
	s_(self, "w", w);
	s_(self, "wl", w);
	s_(self, "h", h);
END;

ComboBox_setHeightList(self, height)
BEGIN
	s_(self, "hl", height);
END;

ComboBox_Title(self, title)
BEGIN
	s_(self, "title", title);
END;

ComboBox_setList(self, list)
BEGIN
	s_(self,  "list", list);
	s_(self,  "index", 1);
	s_(self,  "dimlist", SIZE(list));
	def(self, "DimTemp", Nill);
END;

ComboBox_setDimView(self, dimview)
BEGIN
	s_(self,  "dimview", dimview);
	def(self, "DimTemp", Nill);
	s_(self, "sb_w", 15*(g_(self,"dimview")<>g_(self,"dimlist")));
END;

ComboBox_setIndex(self, index)
BEGIN
	ComboBox_UpdateDimTemp(self, g_(self,"dimtemp"), g_(self,"dimview"), index);
	s_(self, "index", index);
END;

ComboBox_setListDrop(self, flag)
BEGIN
	// If flag is 1, then the list is always visible.
	s_(self, "dropd", NOT flag);
	s_(self, "drops", flag);
END;

ComboBox_DimTemp(self)
BEGIN
	LOCAL dimlist:= g_(self, "dimlist");
	LOCAL dimview:= g_(self, "dimview");
	s_(self, "dimtemp", {1, MIN(dimlist, dimview)});
	s_(self, "dimview", MIN(dimlist, dimview));
END;

ComboBox_Color(self, label, color)
BEGIN
	s_(self, "color_"+label, color);
END;

ComboBox_Plot(self)
BEGIN
	s_(self, "slot", 0);
	IF g_(self, "open") THEN
		LOCAL x:= g_(self, "x");
		LOCAL y:= g_(self, "y");
		LOCAL w:= g_(self, "w");
		LOCAL h:= g_(self, "h");
		LOCAL wl:= g_(self, "wl");
		LOCAL hl:= g_(self, "hl");
		LOCAL list:= g_(self, "list");
		LOCAL title:= g_(self, "title");
		LOCAL color_bg:= g_(self, "color_bg");
		LOCAL color_bo:= g_(self, "color_bo");
		LOCAL color_la:= g_(self, "color_la");
		LOCAL color_lbg:= g_(self, "color_lbg");
		LOCAL color_lla:= g_(self, "color_lla");
		
		def(self, "PlotHeader",    {x, y, w, h, color_bo, color_bg});
		def(self, "PlotTitle",     {x, y, w, h, title, color_la});
		IF g_(self, "drops") AND SIZE(list) THEN
			def(self, "PlotList",      {x, y, w, h, wl, hl, list, color_bo, color_lbg, color_lla});
			def(self, "PlotScrollBar", {x, y, w, h, wl, hl, color_bo, color_bg});
		END;
	END;
END;

ComboBox_PlotHeader(self, x, y, w, h, color_bo, color_bg)
BEGIN
	//border - background
	LOCAL form:=AFormat;
	AFormat:=1;
	fillRect(x, y, w, h, color_bo, IFTE(g_(self,"dropd") AND g_(self,"drops"), iColor(color_bg,30), color_bg));
	AFormat:=form;
END;

ComboBox_PlotTitle(self, x, y, w, h, title, color_la)
BEGIN
	IF NOT g_(self, "fh") AND SIZE(g_(self, "list")) THEN
		LOCAL list:= g_(self, "list");
		title:= list(g_(self, "index"));
	END;
	LOCAL val:= wVal(title, w, 3);
	LOCAL posx:= x + (w - val(2))/2;
	LOCAL posy:= y + (h - 12)/2-1;
	drawText(val(1), posx, posy, 3, color_la);
END;

ComboBox_PlotList(self, x, y, w, h, wl, hl, list, color_bo, color_lbg, color_lla)
BEGIN
	LOCAL dview:= g_(self, "dimview");
	LOCAL dtemp:= g_(self, "dimtemp");
	LOCAL sb_w:= g_(self, "sb_w");
	LOCAL n:= SIZE(list);
	
	//border - background
	fillRect(x, y+h, wl, dview*hl, color_bo, color_lbg);
	
	//current
	LOCAL pos_:= g_(self, "index");
	LOCAL color_pbg:= g_(self, "color_pbg");
	IF pos_>=dtemp(1) AND pos_<=dtemp(2) THEN
		fillRect(x, y+h+hl*(pos_ - dtemp(1)), wl-sb_w, hl, color_bo, iColor(color_lbg, 30));
	END;
	
	//elements
	LOCAL posx, posy, k, val;
	FOR k:=1 TO dview DO
		val:= wVal(list(dtemp(1)+k-1), wl-sb_w, 3);
		posx:= x + 3;
		posy:= y + h + (k-1)*hl + (hl-10)/2 - 2;
		drawText(val(1), posx, posy, 3, color_lla);
		drawLine1(x, y+h+k*hl, wl-sb_w, 0, color_bo);
	END;
END;

ComboBox_PlotScrollBar(self, x, y, w, h, wl, hl, color_bo, color_bg)
BEGIN
	LOCAL sb_w:= g_(self, "sb_w");
	IF sb_w THEN
		LOCAL sb_he:= g_(self, "sb_he");
		LOCAL dtemp:= g_(self, "dimtemp");
		LOCAL dlist:= g_(self, "dimlist");
		LOCAL dview:= g_(self, "dimview");
		LOCAL color_sbg:= g_(self, "color_sbg");
		LOCAL fil:= dtemp(2) - dtemp(1) + 1;
		
		//scroll bar
		LOCAL ini, alt;
		LOCAL posy:= y+h+sb_he;
		LOCAL hbar:= fil*hl-2*sb_he;
		alt:= IP(MAX(1.7*hbar/MAX(dlist-fil+1,1.7), MIN(25,hbar/2)));
		ini:= (dtemp(1)-1)/MAX(dlist-fil,1)*(hbar-alt);
		fillRect(x+wl-sb_w+2, posy+ini, sb_w-4, alt, color_sbg, color_sbg);
		
		drawLine1(x + wl - sb_w, y+h, 0, fil*hl, color_bo);
		fillRect(x + wl - sb_w, y+h, sb_w, sb_he, color_bo, color_bg);
		fillRect(x + wl - sb_w, y+h+fil*hl-sb_he, sb_w, sb_he, color_bo, color_bg);
	END;
END;

ComboBox_mouseDown(self, xm, ym)
BEGIN
	LOCAL x:= g_(self, "x");
	LOCAL y:= g_(self, "y");
	LOCAL w:= g_(self, "w");
	LOCAL h:= g_(self, "h");
	LOCAL wl:= g_(self, "wl");
	LOCAL hl:= g_(self, "hl");
	LOCAL dview:= g_(self, "dimview");
	LOCAL focus:= g_(self, "focus"); //Signal lose focus
	CASE
		IF NOT g_(self, "dropd") THEN
			s_(self, "focus", Widget_cotrains(xm, ym, x, y, w, h+hl*dview));
		END;
		IF g_(self, "drops") THEN
			s_(self, "focus", Widget_cotrains(xm, ym, x, y, w, h)
			OR Widget_cotrains(xm, ym, x, y+h, wl, hl*dview) );
			IF Widget_cotrains(xm, ym, x+wl-g_(self,"sb_w"), y+h, g_(self,"sb_w"), hl*dview) THEN
				s_(self, "drops", 1);
			ELSE
				s_(self, "drops", IFTE(g_(self, "focus"), NOT g_(self, "drops")));
			END;
		END;
		s_(self, "focus", Widget_cotrains(xm, ym, x, y, w, h));
		s_(self, "drops", IFTE(g_(self, "focus"), NOT g_(self, "drops")));
	END;
	IF g_(self, "focus") AND ym > y+h THEN
		LOCAL prev:= g_(self, "index");
		ComboBox_mouseDownPick(self, xm, ym, x, y, wl, h, hl, dview);
		ComboBox_mouseDownScrollBar(self, xm, ym, x, y, wl, h, hl, dview);
		
		// SIGNAL Index Changed
		IF prev <> g_(self, "index") THEN
			Widget_Signal(g_(self, "signalIndexChanged"));
		END;
		
		// SIGNAL Current Index
		IF NOT g_(self, "drops") AND g_(self, "dropd") THEN
			Widget_Signal(g_(self, "signalCurrentIndex"));
		END;
	ELSE
		IF focus THEN //SIGNAL lose focus
			Widget_Signal(g_(self, "signalLoseFocus"));
		END;
	END;
	// SIGNAL Current Index
	IF focus AND NOT g_(self, "drops") AND g_(self, "dropd") THEN
		Widget_Signal(g_(self, "signalClosed"));
	END;
END;

ComboBox_Connect(self, signal, args)
BEGIN
	Widget_Connect(self, signal, args);
END;

ComboBox_cotrainsPickItem(self, ym, y, h, hl)
BEGIN
	RETURN IP((ym-(y+h))/hl) + 1;
END;

ComboBox_mouseDownPick(self, xm,ym, x, y, wl, h, hl, dview)
BEGIN
	IF Widget_cotrains(xm, ym, x, y+h, wl-g_(self, "sb_w"), dview*hl) THEN
		LOCAL dtemp:= g_(self, "dimtemp");
		s_(self, "index", dtemp(1) + def(self, "cotrainsPickItem", {ym, y, h, hl}) - 1);
	END;
END;

ComboBox_mouseDownScrollBar(self, xm, ym, x, y, wl, h, hl, dview)
BEGIN
	LOCAL sb_w:= g_(self, "sb_w");
	IF sb_w AND g_(self, "drops") THEN
		LOCAL sb_he:= g_(self, "sb_he");
		
		//Vertical
		IF Widget_cotrains(xm, ym, x+wl-sb_w, y+h+sb_he, sb_w, hl*dview-2*sb_he) THEN
			LOCAL ini,alt;
			LOCAL dlist:= g_(self, "dimlist");
			LOCAL dtemp:= g_(self, "dimtemp");
			LOCAL nf:= dtemp(2) - dtemp(1) + 1;
			LOCAL len_vbar:= dview*hl - 2*sb_he;
			alt:= IP(MAX(1.7*len_vbar/MAX(dlist-nf+1,1.7), MIN(25,len_vbar/2)));
			ini:= (dtemp(1)-1)/MAX(dlist-nf,1)*(len_vbar-alt);
			IF ym<y+h+sb_he+ini THEN //Up
				dtemp(1):= dtemp(1) + IFTE(dtemp(1)>1,-1,0);
				s_(self, "dimtemp", {dtemp(1), dtemp(1) + nf - 1});
			END;
			IF ym>y+h+sb_he+ini+alt THEN //Down
				dtemp(2):= dtemp(2) + IFTE(dtemp(2)<dlist,1,0);
				s_(self, "dimtemp", {dtemp(2) - nf + 1, dtemp(2)});
			END;
		END;
	END;
END;

ComboBox_mouseMove(self, action)
BEGIN
	IF g_(self, "focus") AND isList(action(2)) THEN
		LOCAL dy:= action(1,3) - action(2,3);
		LOCAL dtemp:= g_(self, "dimtemp");
		LOCAL dlist:= g_(self, "dimlist");
		LOCAL nf:= dtemp(2) - dtemp(1) + 1;
		
		dy:= ROUND(dy/25,0);
		IF dy < 0 THEN //down
			dtemp(2):= IFTE(dtemp(2)-dy<dlist,dtemp(2)-dy,dlist);
			dtemp(1):= dtemp(2) - nf + 1;
		END;
		IF dy > 0 THEN //up
			dtemp(1):= IFTE(dtemp(1)-dy>1,dtemp(1)-dy,1);
			dtemp(2):= dtemp(1) + nf - 1;
		END;
		s_(self, "dimtemp", dtemp);
	END;
END;

ComboBox_arrowUp(self, previous)
BEGIN
	IF g_(self, "focus") AND g_(self, "drops") THEN
		LOCAL pos_:= g_(self, "index");
		LOCAL prev:= pos_;
		LOCAL dtemp:= g_(self, "dimtemp");
		LOCAL dlist:= g_(self, "dimlist");
		LOCAL dview:= g_(self, "dimview");
		CASE
			IF STRING(previous) == STRING(36) THEN //ALF 36 SHIT 41
				pos_:= IFTE(pos_>dtemp(1), dtemp(1), dtemp(1)-dview);
				pos_:= IFTE(pos_<1, 1, pos_);
			END;
			IF STRING(previous) == STRING(41) THEN
				pos_:= 1;
			END;
			pos_:= pos_ + IFTE(pos_>1, -1, 0);
		END;
		s_(self, "index", pos_);
		def(self, "UpdateDimTemp", {dtemp, dview, pos_});
		
		// SIGNAL Index Changed
		IF prev <> g_(self, "index") THEN
			Widget_Signal(g_(self, "signalIndexChanged"));
		END;
	END;
END;

ComboBox_arrowDown(self, previous)
BEGIN
	IF g_(self, "focus") AND g_(self, "drops") THEN
		LOCAL pos_:= g_(self, "index");
		LOCAL prev:= pos_;
		LOCAL dtemp:= g_(self, "dimtemp");
		LOCAL dlist:= g_(self, "dimlist");
		LOCAL dview:= g_(self, "dimview");
		CASE
			IF STRING(previous) == STRING(36) THEN //ALF 36 SHIT 41
				pos_:= IFTE(pos_<dtemp(2), dtemp(2), dtemp(2)+dview);
				pos_:= IFTE(pos_>dlist, dlist, pos_);
			END;
			IF STRING(previous) == STRING(41) THEN
				pos_:= dlist;
			END;
			pos_:= pos_ + IFTE(pos_ < dlist, 1, 0);
		END;
		s_(self, "index", pos_);
		def(self, "UpdateDimTemp", {dtemp, dview, pos_});
		
		// SIGNAL Index Changed
		IF prev <> g_(self, "index") THEN
			Widget_Signal(g_(self, "signalIndexChanged"));
		END;
	END;
END;

ComboBox_UpdateDimTemp(self, dtemp, dview, pos_)
BEGIN
	CASE
		IF pos_ < dtemp(1) THEN
			s_(self, "dimtemp", {pos_, pos_ + dview - 1});
		END;
		IF pos_ > dtemp(2) THEN
			s_(self, "dimtemp", {pos_ - dview + 1, pos_});
		END;
	END;
END;


//*********************** TABLE WIDGET CLASS ************************
TableWidget_Class()
BEGIN
	init(
		"TableWidget",
		{
			{"x", 0},
			{"y", 0},
			{"w", 200},
			{"h", 20},
			{"title", "TableWidget"},
			{"table", Nill},
			{"pos",   {1,1}},
			{"ht", 20},
			{"head", ""},
			{"row_header", Nill},
			{"col_header", Nill},
			{"hrow_w", 25},
			{"hcol_h", 20},
			{"dimview", {3,4}},
			{"dimtab",  Nill},
			{"dimtemp", Nill},
			{"hi", 20},
			{"sb_w", 15},
			{"sb_he", 7},
			{"open", 1},
			{"focus", 0},
			{"lobj", {}},
			{"fobj", 0},
			{"slot", 0},
			{"signalIsClicked", {}},
			{"press", 0},
			{"color_bg", {190,210,240}},
			{"color_bo", {0,0,0}},
			{"color_la", {0,0,0}},
			{"color_tbg", {210,210,210}},
			{"color_tla", {0,0,0}},
			{"color_hbg", {150,150,150}},
			{"color_hla", {0,0,0}},
			{"color_pbg", iColor({210,210,210}, 30)},
			{"color_ibg", {255,255,255}},
			{"color_sbg", {120,120,120}}
		},
		{"Move","Size","Title","setTable","setHeightTable","setHead","setRowHeader","setColHeader",
		"setRowHeaderWeight","setColHeaderHeight","setDimView","DimTemp",
		"Plot","PlotHeader","PlotTitle","PlotRCHeaders","PlotTable","PlotInfBar","PlotScrollBars",
		"mouseDown", "cotrainsPick", "cotrainsPickItemX", "cotrainsPickItemY", "mouseDownPick",
		"arrowUp", "arrowDown", "arrowLeft", "arrowRight", "UpdateDimTemp",
		"cotrainsScrollBarV", "cotrainsScrollBarH", "mouseDownScrollBar",
		"mouseMove", "mouseLongClick"},
		Nill
	);
END;

TableWidget_Move(self, x, y)
BEGIN
	s_(self, "x", x);
	s_(self, "y", y);
END;

TableWidget_Size(self, w, h)
BEGIN
	s_(self, "w", w);
	s_(self, "h", h);
END;

TableWidget_Title(self, title)
BEGIN
	s_(self, "title", title);
END;

TableWidget_setTable(self, tab)
BEGIN
	s_(self,  "table", tab);
	s_(self,  "dimtab", SIZE(tab));
	s_(self,  "pos", {1,1});
	def(self, "DimTemp", Nill);
	
	LOCAL dimtab:= SIZE(tab);
	IF g_(self, "row_header") == Nill then
		s_(self,  "row_header", MAKELIST(X,X,1,dimtab(1),1));
	END;
	IF g_(self, "col_header") == Nill then
		s_(self,  "col_header", MAKELIST(X,X,1,dimtab(2),1));
	END;
END;

TableWidget_setHeightTable(self, height)
BEGIN
	s_(self, "ht", height);
END;

TableWidget_setHead(self, hd)
BEGIN
	s_(self, "head", hd);
END;

TableWidget_setRowHeader(self, rh)
BEGIN
	s_(self, "row_header", rh);
END;

TableWidget_setColHeader(self, ch)
BEGIN
	s_(self, "col_header", ch);
END;

TableWidget_setRowHeaderWeight(self, rh)
BEGIN
	s_(self, "hrow_w", rh);
END;

TableWidget_setColHeaderHeight(self, ch)
BEGIN
	s_(self, "hcol_h", ch);
END;

TableWidget_setDimView(self, dimview)
BEGIN
	s_(self,  "dimview", dimview);
	def(self, "DimTemp", Nill);
END;

TableWidget_DimTemp(self)
BEGIN
	LOCAL dimtab:=  g_(self, "dimtab");
	LOCAL dimview:= g_(self, "dimview");
	s_(self, "dimtemp", {1, MIN(dimtab(1), dimview(1)), 1, MIN(dimtab(2), dimview(2))} );
	s_(self, "dimview", {MIN(dimtab(1), dimview(1)), MIN(dimtab(2), dimview(2))});
END;

TableWidget_Plot(self)
BEGIN
	s_(self, "slot", 0);
	IF g_(self, "open") THEN
		LOCAL x:= g_(self, "x");
		LOCAL y:= g_(self, "y");
		LOCAL w:= g_(self, "w");
		LOCAL h:= g_(self, "h");
		LOCAL color_bg:= g_(self, "color_bg");
		LOCAL color_bo:= g_(self, "color_bo");
		LOCAL color_la:= g_(self, "color_la");
		
		def(self, "PlotHeader",     {x, y, w, h, color_bo, color_bg});
		def(self, "PlotTitle",      {x, y, w, h, color_la});
		def(self, "PlotTable",      {x, y, w, h, color_bo});
		def(self, "PlotRCHeaders",  {x, y, w, h, color_bo});
		def(self, "PlotInfBar",     {x, y, w, h, color_bo, color_la});
		def(self, "PlotScrollBars", {x, y, w, h, color_bo});
	END;
END;

TableWidget_PlotHeader(self, x, y, w, h, color_bo, color_bg)
BEGIN
	fillRect(x, y, w, h, color_bo, color_bg);
END;

TableWidget_PlotTitle(self, x, y, w, h, color_la)
BEGIN
	LOCAL val:= wVal(g_(self, "title"), w, 3);
	LOCAL posx:= x + (w - val(2))/2;
	LOCAL posy:= y + (h - 10)/2 - 3;
	drawText(val(1), posx, posy, 3, color_la);
END;

TableWidget_PlotRCHeaders(self, x, y, w, h, color_bo)
BEGIN
	LOCAL hd:= g_(self, "head");
	LOCAL sb_w:= g_(self, "sb_w");
	LOCAL sb_h:= sb_w;
	LOCAL hrow_w:= g_(self, "hrow_w");
	LOCAL hcol_h:= g_(self, "hcol_h");
	LOCAL row_header:= g_(self, "row_header");
	LOCAL col_header:= g_(self, "col_header");
	LOCAL color_hbg:= g_(self, "color_hbg");
	LOCAL color_hla:= g_(self, "color_hla");
	LOCAL dtemp:= g_(self, "dimtemp");
	LOCAL dview:= g_(self, "dimview");
	LOCAL fi:= dtemp(2) - dtemp(1) + 1;
	LOCAL co:= dtemp(4) - dtemp(3) + 1;
	LOCAL pos_:= g_(self, "pos");
	
	//head
	fillRect(x, y+h, hrow_w, hcol_h, color_bo, color_hbg);
	LOCAL val:= wVal(hd, hrow_w, 3);
	LOCAL posx:= x + (hrow_w - val(2))/2;
	LOCAL posy:= y + h + (hcol_h - 10)/2 - 2;
	drawText(val(1), posx, posy, 3, color_hla);
	
	LOCAL i;
	LOCAL ht:= g_(self, "ht");
	LOCAL wcell:= (w-hrow_w-sb_w)/dview(2);
	LOCAL posx, posy;
	
	LOCAL form:=AFormat;
	AFormat:=1;
	//row headers - vertical
	fillRect(x, y+h+hcol_h, hrow_w, fi*ht, color_bo, color_hbg);
	IF pos_(1)>=dtemp(1) AND pos_(1)<=dtemp(2) THEN
		fillRect(x, y+h+hcol_h+(pos_(1)-dtemp(1))*ht, hrow_w, ht, color_bo, iColor(color_hbg, 30));
	END;
	FOR i:= 1 TO fi DO
		val:= wVal(row_header(dtemp(1)+i-1), hrow_w, 3);
		posx:= x + (hrow_w - val(2))/2;
		posy:= y + h + hcol_h + (i-1)*ht + (ht-10)/2 - 2;
		drawText(val(1), posx, posy, 3, color_hla);
		drawLine1(x, y+h+hcol_h+i*ht, hrow_w+co*wcell, 0, color_bo);
	END;
	
	//col headers - horizontal
	fillRect(x+hrow_w, y+h, co*wcell, hcol_h, color_bo, color_hbg);
	IF pos_(2)>=dtemp(3) AND pos_(2)<=dtemp(4) THEN
		fillRect(x+hrow_w+(pos_(2)-dtemp(3))*wcell, y+h, wcell, hcol_h, color_bo, iColor(color_hbg, 30));
	END;
	FOR i:= 1 TO co DO
		val:= wVal(col_header(dtemp(3)+i-1), wcell, 3);
		posx:= x + hrow_w + (i-1)*wcell + (wcell-val(2))/2;
		posy:= y + h + (hcol_h-10)/2 - 2;
		drawText(val(1), posx, posy, 3, color_hla);
		drawLine1(x + hrow_w + i*wcell, y+h, 0, hcol_h + fi*ht, color_bo);
	END;
	AFormat:=form;
END;

TableWidget_PlotTable(self, x, y, w, h, color_bo)
BEGIN
	LOCAL ht:= g_(self, "ht");
	LOCAL tab:= g_(self, "table");
	LOCAL color_tbg:= g_(self, "color_tbg");
	LOCAL color_tla:= g_(self, "color_tla");
	LOCAL color_pbg:= g_(self, "color_pbg");
	LOCAL dview:= g_(self, "dimview");
	LOCAL dtemp:= g_(self, "dimtemp");
	LOCAL hcol_h:= g_(self, "hcol_h");
	LOCAL hrow_w:= g_(self, "hrow_w");
	LOCAL sb_w:= g_(self, "sb_w");
	LOCAL sb_h:= sb_w;
	LOCAL wcell:= (w-hrow_w-sb_w)/dview(2);
	LOCAL pos_:= g_(self, "pos");
	
	//bg
	fillRect(x, y+h, w, hcol_h+ht*dview(1)+sb_h, color_bo, color_tbg);
	
	//pos
	LOCAL posx, posy, val;
	LOCAL i:= pos_(1) - dtemp(1) + 1;
	LOCAL j:= pos_(2) - dtemp(3) + 1;
	IF pos_(1)>=dtemp(1) AND pos_(1)<=dtemp(2) AND pos_(2)>=dtemp(3) AND pos_(2)<=dtemp(4) THEN
		fillRect(x+hrow_w+(j-1)*wcell, y+h+hcol_h+(i-1)*ht, wcell, ht, color_pbg, color_pbg);
	END;
	
	//table
	FOR i:=1 TO dtemp(2) - dtemp(1) + 1 DO
		FOR j:=1 TO dtemp(4) - dtemp(3) + 1 DO
			val:= wVal(tab(dtemp(1)+i-1, dtemp(3)+j-1), wcell, 3);
			posx:= x + hrow_w + (j-1)*wcell + (wcell-val(2))/2;
			posy:= y + h + hcol_h + (i-1)*ht + (ht-10)/2 - 2;
			drawText(val(1), posx, posy, 3, color_tla);
		END;
	END;
END;

TableWidget_PlotInfBar(self, x, y, w, h, color_bo, color_la)
BEGIN
	LOCAL hi:= g_(self, "hi");
	LOCAL ht:= g_(self, "ht");
	LOCAL pos_:= g_(self, "pos");
	LOCAL sb_h:= g_(self, "sb_w");
	LOCAL dview:= g_(self, "dimview");
	LOCAL hcol_h:= g_(self, "hcol_h");
	LOCAL color_ibg:= g_(self, "color_ibg");
	
	//bg
	fillRect(x, y+h+hcol_h+dview(1)*ht+sb_h, w, hi, color_bo, color_ibg);
	
	//pos
	LOCAL tab:= g_(self, "table");
	LOCAL form:= AFormat;
	AFormat:= IFTE(g_(self, "press"), 1, form);
	LOCAL val:= wVal(tab(pos_(1),pos_(2)), w, 3);
	AFormat:=form;
	LOCAL posx:= x + 3;
	LOCAL posy:= y + h + hcol_h + dview(1)*ht + (hi-10)/2 - 2 + sb_h;
	drawText(val(1), posx, posy, 3, color_la);
END;

TableWidget_PlotScrollBars(self, x, y, w, h, color_bo)
BEGIN
	LOCAL ht:= g_(self, "ht");
	LOCAL sb_w:= g_(self, "sb_w");
	LOCAL sb_h:= sb_w;
	LOCAL sb_e:= g_(self, "sb_he");
	LOCAL hcol_h:= g_(self, "hcol_h");
	LOCAL dtab:= g_(self, "dimtab");
	LOCAL dtemp:= g_(self, "dimtemp");
	LOCAL dview:= g_(self, "dimview");
	LOCAL color_sbg:= g_(self, "color_sbg");
	LOCAL color_bg:= g_(self, "color_bg");
	LOCAL nf:= dtemp(2) - dtemp(1) + 1;
	LOCAL nc:= dtemp(4) - dtemp(3) + 1;
	LOCAL len_vbar:= hcol_h + dview(1)*ht - sb_e;
	LOCAL len_hbar:= w - sb_w - sb_e;
	LOCAL ini, alt;
	
	//vertical scroll bar
	alt:= IP(MAX(1.7*len_vbar/MAX(dtab(1)-nf+1,1.7), MIN(25,len_vbar/2)));
	ini:= (dtemp(1)-1)/MAX(dtab(1)-nf,1)*(len_vbar-alt);
	fillRect(x+w-sb_w+2, y + h + sb_e+ini, sb_w-4, alt, color_sbg, color_sbg);
	drawLine1(x+w-sb_w, y+h, 0, hcol_h + dview(1)*ht + sb_h, color_bo);
	fillRect(x+w-sb_w, y+h, sb_w, sb_e, color_bo, color_bg);
	
	//horizontal scroll bar
	alt:= IP(MAX(1.7*len_hbar/MAX(dtab(2)-nc+1,1.7), MIN(25,len_hbar/2)));
	ini:= (dtemp(3)-1)/MAX(dtab(2)-nc,1)*(len_hbar-alt);
	fillRect(x+sb_e+ini, y+h+hcol_h+dview(1)*ht+2, alt, sb_h-4, color_sbg, color_sbg);
	drawLine1(x, y+h+hcol_h+dview(1)*ht, w, 0, color_bo);
	fillRect(x, y+h+hcol_h+dview(1)*ht, sb_e, sb_h, color_bo, color_bg);
	
	fillRect(x+w-sb_w, y+h+hcol_h+dview(1)*ht, sb_w, sb_h, color_bo, color_bg);
END;

TableWidget_mouseDown(self, xm, ym)
BEGIN
	LOCAL x:= g_(self, "x");
	LOCAL y:= g_(self, "y");
	LOCAL w:= g_(self, "w");
	LOCAL h:= g_(self, "h");
	LOCAL hi:= g_(self, "hi");
	LOCAL ht:= g_(self, "ht");
	LOCAL hcol_h:= g_(self, "hcol_h");
	LOCAL sb_w:= g_(self, "sb_w");
	LOCAL dview:= g_(self, "dimview");
	
	s_(self, "focus", Widget_cotrains(xm, ym, x, y, w, h+hcol_h+ht*dview(1)+sb_w+hi));
	
	TableWidget_mouseDownPick(self, xm, ym);
	TableWidget_mouseDownScrollBar(self, xm, ym);
END;

TableWidget_cotrainsPick(self, xm, ym, x, y, w, h, ht, sb_w, hrow_w, hcol_h, dtemp)
BEGIN
	LOCAL fil = dtemp(2) - dtemp(1) + 1;
	RETURN x+hrow_w < xm < x+w-sb_w AND y+h+hcol_h < ym < y+h+hcol_h+fil*ht;
END;

TableWidget_cotrainsPickItemX(self, xm, x, w, sb_w, hrow_w, dview)
BEGIN
	LOCAL wcell:= (w-hrow_w-sb_w)/dview(2);
	RETURN IP((xm-(x+hrow_w))/wcell) + 1;
END;

TableWidget_cotrainsPickItemY(self, ym, y, h, ht, hcol_h)
BEGIN
	RETURN IP((ym-(y+h+hcol_h))/ht) + 1;
END;

TableWidget_mouseDownPick(self, xm, ym)
BEGIN
	LOCAL x:= g_(self, "x");
	LOCAL y:= g_(self, "y");
	LOCAL w:= g_(self, "w");
	LOCAL h:= g_(self, "h");
	LOCAL sb_w:= g_(self, "sb_w");
	LOCAL hrow_w:= g_(self, "hrow_w");
	LOCAL hcol_h:= g_(self, "hcol_h");
	LOCAL ht:= g_(self, "ht");
	
	LOCAL tpos_:={};
	LOCAL dtemp:= g_(self, "dimtemp");
	LOCAL dview:= g_(self, "dimview");
	
	IF def(self, "cotrainsPick", {xm, ym, x, y, w, h, ht, sb_w, hrow_w, hcol_h, dtemp}) THEN
		s_(self, "press", 0);
		tpos_(1):= dtemp(1) + def(self, "cotrainsPickItemY", {ym, y, h, ht, hcol_h}) - 1;
		tpos_(2):= dtemp(3) + def(self, "cotrainsPickItemX", {xm, x, w, sb_w, hrow_w, dview}) - 1;
		s_(self, "pos", tpos_);
	END;
END;

TableWidget_cotrainsScrollBarV(self, xm, ym, x, y, w, h, ht, hcol_h, sb_w, sb_he, dview)
BEGIN
	RETURN x+w-sb_w < xm < x+w AND y+h+sb_he < ym < y+h+hcol_h+ht*dview(1);
END;

TableWidget_cotrainsScrollBarH(self, xm, ym, x, y, w, h, ht, hcol_h, sb_w, sb_he, dview)
BEGIN
	RETURN x+sb_he < xm < x+w-sb_w AND y+h+hcol_h+ht*dview(1) < ym < y+h+hcol_h+ht*dview(1)+sb_w;
END;

TableWidget_mouseDownScrollBar(self, xm, ym)
BEGIN
	LOCAL x:= g_(self, "x");
	LOCAL y:= g_(self, "y");
	LOCAL w:= g_(self, "w");
	LOCAL h:= g_(self, "h");
	LOCAL ht:= g_(self, "ht");
	LOCAL hcol_h:= g_(self, "hcol_h");
	LOCAL sb_w:= g_(self, "sb_w");
	LOCAL sb_he:= g_(self, "sb_he");
	LOCAL dview:= g_(self, "dimview");
	LOCAL ini,alt;
	
	//Vertical
	IF def(self, "cotrainsScrollBarV", {xm, ym, x, y, w, h, ht, hcol_h, sb_w, sb_he, dview}) THEN
		LOCAL dtab:= g_(self, "dimtab");
		LOCAL dtemp:= g_(self, "dimtemp");
		LOCAL nf:= dtemp(2) - dtemp(1) + 1;
		LOCAL nc:= dtemp(4) - dtemp(3) + 1;
		LOCAL len_vbar:= hcol_h + dview(1)*ht - sb_he;
		alt:= IP(MAX(1.7*len_vbar/MAX(dtab(1)-nf+1,1.7), MIN(25,len_vbar/2)));
		ini:= (dtemp(1)-1)/MAX(dtab(1)-nf,1)*(len_vbar-alt);
		IF ym<y+h+sb_he+ini THEN //Up
			dtemp(1):= dtemp(1) + IFTE(dtemp(1)>1,-1,0);
			s_(self, "dimtemp", {dtemp(1), dtemp(1) + nf - 1, dtemp(3), dtemp(4)});
		END;
		IF ym>y+h+sb_he+ini+alt THEN //Down
			dtemp(2):= dtemp(2) + IFTE(dtemp(2)<dtab(1),1,0);
			s_(self, "dimtemp", {dtemp(2) - nf + 1, dtemp(2), dtemp(3), dtemp(4)});
		END;
	END;
	
	//Horizontal
	IF def(self, "cotrainsScrollBarH", {xm, ym, x, y, w, h, ht, hcol_h, sb_w, sb_he, dview}) THEN
		LOCAL dtab:= g_(self, "dimtab");
		LOCAL dtemp:= g_(self, "dimtemp");
		LOCAL nf:= dtemp(2) - dtemp(1) + 1;
		LOCAL nc:= dtemp(4) - dtemp(3) + 1;
		LOCAL len_hbar:= w - sb_w - sb_he;
		alt:= IP(MAX(1.7*len_hbar/MAX(dtab(2)-nc+1,1.7), MIN(25,len_hbar/2)));
		ini:= (dtemp(3)-1)/MAX(dtab(2)-nc,1)*(len_hbar-alt);
		IF xm<x+sb_he+ini THEN //Left
			dtemp(3):= dtemp(3) + IFTE(dtemp(3)>1,-1,0);
			s_(self, "dimtemp", {dtemp(1), dtemp(2), dtemp(3), dtemp(3) + nc - 1});
		END;
		IF xm>x+sb_he+ini+alt THEN //Right
			dtemp(4):= dtemp(4) + IFTE(dtemp(4)<dtab(2),1,0);
			s_(self, "dimtemp", {dtemp(1), dtemp(2), dtemp(4) - nc + 1, dtemp(4)});
		END;
	END;
END;

TableWidget_mouseMove(self, action)
BEGIN
	IF g_(self, "focus") AND isList(action(2)) THEN
		LOCAL dx:= IFTE(action(2,1)==2, 0, action(1,2) - action(2,2));
		LOCAL dy:= IFTE(action(2,1)==2, 0, action(1,3) - action(2,3));
		LOCAL dtemp:= g_(self, "dimtemp");
		LOCAL dtab:= g_(self, "dimtab");
		LOCAL nf:= dtemp(2) - dtemp(1) + 1;
		LOCAL nc:= dtemp(4) - dtemp(3) + 1;
		
		// Horizontal
		dx:= ROUND(dx/25,0);
		IF dx < 0 THEN //right
			dtemp(4):= IFTE(dtemp(4)-dx<dtab(2),dtemp(4)-dx,dtab(2));
			dtemp(3):= dtemp(4) - nc + 1;
		END;
		IF dx > 0 THEN //left
			dtemp(3):= IFTE(dtemp(3)-dx>1,dtemp(3)-dx,1);
			dtemp(4):= dtemp(3) + nc - 1;
		END;
		
		// Vertical
		dy:= ROUND(dy/25,0);
		IF dy < 0 THEN //down
			dtemp(2):= IFTE(dtemp(2)-dy<dtab(1),dtemp(2)-dy,dtab(1));
			dtemp(1):= dtemp(2) - nf + 1;
		END;
		IF dy > 0 THEN //up
			dtemp(1):= IFTE(dtemp(1)-dy>1,dtemp(1)-dy,1);
			dtemp(2):= dtemp(1) + nf - 1;
		END;
		s_(self, "dimtemp", dtemp);
	END;
END;

TableWidget_mouseLongClick(self)
BEGIN
	s_(self, "press", g_(self, "focus"));
END;

TableWidget_arrowUp(self, prev)
BEGIN
	IF g_(self, "focus") THEN
		LOCAL pos_:= g_(self, "pos");
		LOCAL dtab:= g_(self, "dimtab");
		LOCAL dtemp:= g_(self, "dimtemp");
		LOCAL dview:= g_(self, "dimview");
		CASE
			IF STRING(prev) == STRING(36) THEN //ALF 36 SHIT 41
				pos_(1):= IFTE(pos_(1)>dtemp(1), dtemp(1), dtemp(1)-dview(1));
				pos_(1):= IFTE(pos_(1)<1, 1, pos_(1));
			END;
			IF STRING(prev) == STRING(41) THEN
				pos_(1):= 1;
			END;
			pos_(1):= pos_(1) + IFTE(pos_(1)>1, -1, 0);
		END;
		s_(self, "pos", pos_);
		def(self, "UpdateDimTemp", {dtab, dtemp, dview, pos_});
	END;
END;

TableWidget_arrowDown(self, prev)
BEGIN
	IF g_(self, "focus") THEN
		LOCAL pos_:= g_(self, "pos");
		LOCAL dtab:= g_(self, "dimtab");
		LOCAL dtemp:= g_(self, "dimtemp");
		LOCAL dview:= g_(self, "dimview");
		CASE
			IF STRING(prev) == STRING(36) THEN //ALF 36 SHIT 41
				pos_(1):= IFTE(pos_(1)<dtemp(2), dtemp(2), dtemp(2)+dview(1));
				pos_(1):= IFTE(pos_(1)>dtab(1), dtab(1), pos_(1));
			END;
			IF STRING(prev) == STRING(41) THEN
				pos_(1):= dtab(1);
			END;
			pos_(1):= pos_(1) + IFTE(pos_(1)<dtab(1), 1, 0);
		END;
		s_(self, "pos", pos_);
		def(self, "UpdateDimTemp", {dtab, dtemp, dview, pos_});
	END;
END;

TableWidget_arrowLeft(self, prev)
BEGIN
	IF g_(self, "focus") THEN
		LOCAL pos_:= g_(self, "pos");
		LOCAL dtab:= g_(self, "dimtab");
		LOCAL dtemp:= g_(self, "dimtemp");
		LOCAL dview:= g_(self, "dimview");
		CASE
			IF STRING(prev) == STRING(36) THEN //ALF 36 SHIT 41
				pos_(2):= IFTE(pos_(2)>dtemp(3), dtemp(3), dtemp(3)-dview(2));
				pos_(2):= IFTE(pos_(2)<1, 1, pos_(2));
			END;
			IF STRING(prev) == STRING(41) THEN
				pos_(2):= 1;
			END;
			pos_(2):= pos_(2) + IFTE(pos_(2)>1, -1, 0);
		END;
		s_(self, "pos", pos_);
		def(self, "UpdateDimTemp", {dtab, dtemp, dview, pos_});
	END;
END;

TableWidget_arrowRight(self, prev)
BEGIN
	IF g_(self, "focus") THEN
		LOCAL pos_:= g_(self, "pos");
		LOCAL dtab:= g_(self, "dimtab");
		LOCAL dtemp:= g_(self, "dimtemp");
		LOCAL dview:= g_(self, "dimview");
		CASE
			IF STRING(prev) == STRING(36) THEN //ALF 36 SHIT 41
				pos_(2):= IFTE(pos_(2)<dtemp(4), dtemp(4), dtemp(4)+dview(2));
				pos_(2):= IFTE(pos_(2)>dtab(2), dtab(2), pos_(2));
			END;
			IF STRING(prev) == STRING(41) THEN
				pos_(2):= dtab(2);
			END;
			pos_(2):= pos_(2) + IFTE(pos_(2)<dtab(2), 1, 0);
		END;
		s_(self, "pos", pos_);
		def(self, "UpdateDimTemp", {dtab, dtemp, dview, pos_});
	END;
END;

TableWidget_UpdateDimTemp(self, dtab, dtemp, dview, pos_)
BEGIN
	CASE
		IF pos_(1) < dtemp(1) THEN
			s_(self, "dimtemp", {pos_(1), pos_(1) + dview(1) - 1, dtemp(3), dtemp(4)});
		END;
		IF pos_(1) > dtemp(2) THEN
			s_(self, "dimtemp", {pos_(1) - dview(1) + 1, pos_(1), dtemp(3), dtemp(4)});
		END;
		IF pos_(2) < dtemp(3) THEN
			s_(self, "dimtemp", {dtemp(1), dtemp(2), pos_(2), pos_(2) + dview(2) - 1});
		END;
		IF pos_(2) > dtemp(4) THEN
			s_(self, "dimtemp", {dtemp(1), dtemp(2), pos_(2) - dview(2) + 1, pos_(2)});
		END;
	END;
END;


//********************************* BOARD CLASS ****************************
Board_Class()
BEGIN
	init(
		"Board",
		{
			{"x", 0},
			{"y", 0},
			{"w", 320},
			{"h", 240},
			{"lx", {}},
			{"ly", {}},
			{"lz", {}},
			{"lxn", {}},
			{"lyn", {}},
			{"deltax", {37,37}},
			{"deltay", {30,30}},
			{"li", {}},
			{"lj", {}},
			{"ls", {}},
			{"dv", 0},
			{"de", 0},
			{"ds", 0},
			{"enumv", 0},
			{"enume", 0},
			{"field", Nill},
			{"lvselect", {}},
			{"leselect", {}},
			{"shift", 0},
			{"alpha", 0},
			{"ang",   {0,0,0}},
			{"zf",    3},
			{"proj", "o"},
			{"focus", 0},
			{"slot",  0},
			{"signalVertex", {}},
			{"signalEdge",   {}},
			{"open", 1},
			{"lobj", {}},
			{"fobj", 0},
			{"color_bg", {200,200,200}},
			{"color_bo", {0,0,0}},
			{"color_la", {200,200,200}},
			{"color_v",  {200,200,150}},
			{"color_e",  {50,100,150}},
			{"color_s",  gColor("green")},
			{"color_vs", {130,130,0}},
			{"color_es", {130,130,0}},
			{"sv", {}},
			{"sv_range", {}},
			{"sv_color", {}},
			{"sv_activ", {}},
			{"se", {}},
			{"se_range", {}},
			{"se_color", {}},
			{"se_activ", {}},
			{"ss", {}},
			{"ss_range", {}},
			{"ss_color", {}}
		},
		{"Move", "Size", "Vertex", "Edge", "Surfaces", "Norm", "Projection", "PFactor",
		"Plot", "PlotBackground", "PlotVertexes", "PlotEdges", "PlotFieldSelect", "PlotItemsSelected",
		"PlotAlphaKey", "PlotSurfaces", "PlotBox",
		"cotrains", "mouseMove", "mouseDown", "mouseLongClick", "mouseUp",
		"VertexSelected", "EdgeSelected", "ItemsSelected",
		"getKey", "alphaKey", "LayerCubeSelected", "UpdateRen",
		"Connect"},
		"Widget"
	);
END;

Board_Move(self, x, y)
BEGIN
	LOCAL xt:= g_(self, "x");
	LOCAL yt:= g_(self, "y");
	s_(self, "x", x);
	s_(self, "y", y);
	IF SIZE(g_(self, "lx")) THEN
		s_(self, "lxn", x + g_(self, "lxn") - xt);
		s_(self, "lyn", y + g_(self, "lyn") - yt);
	END;
	LOCAL i, lobj:= g_(self, "lobj");
	FOR i:=1 TO SIZE(lobj) DO
		def(lobj(i), "Move", {x+(g_(lobj(i),"x")-xt), y+(g_(lobj(i),"y")-yt)});
	END;
END;

Board_Size(self, w, h)
BEGIN
	s_(self, "w", w);
	s_(self, "h", h);
	IF SIZE(g_(self, "lx")) THEN
		LOCAL lx:= g_(self,"lx");
		LOCAL ly:= g_(self,"ly");
		LOCAL lz:= g_(self,"lz");
		LOCAL pt:= r3d(lx, ly, lz, g_(self,"ang"), "o", g_(self,"zf"));
		Board_Norm(self, pt(1), pt(2));
	END;
END;

Board_Vertex(self, type_, v)
BEGIN
	CASE
		IF type_ == "add" THEN
			s_(self, "lx", CONCAT(g_(self, "lx"), v(1)));
			s_(self, "ly", CONCAT(g_(self, "ly"), v(2)));
			s_(self, "lz", CONCAT(g_(self, "lz"), v(3)));
		END;
		IF type_ == "addList" THEN
			s_(self, "lx", CONCAT(g_(self, "lx"), v(1)));
			s_(self, "ly", CONCAT(g_(self, "ly"), v(2)));
			s_(self, "lz", CONCAT(g_(self, "lz"), v(3)));
		END;
		IF type_ == "setList" THEN
			s_(self, "lx", v(1));
			s_(self, "ly", v(2));
			s_(self, "lz", v(3));
		END;
		IF type_ == "remove" THEN
			s_(self, "lx", SUBe(g_(self,"lx"), v));
			s_(self, "ly", SUBe(g_(self,"ly"), v));
			s_(self, "lz", SUBe(g_(self,"lz"), v));
			Board_updateSet(self,     v, -1, "sv", "sv_range");
			Board_updateEdge(self,    v, -1);
			Board_updateSurface(self, v, -1);
		END;
		IF type_ == "clear" THEN
			s_(self, "lx", {});
			s_(self, "ly", {});
			s_(self, "lz", {});
			s_(self, "li", {});
			s_(self, "lj", {});
			s_(self, "ls", {});
			s_(self, "de", 0);
			s_(self, "ds", 0);
			s_(self, "sv", {});
			s_(self, "sv_range", {});
			s_(self, "sv_color", {});
			s_(self, "sv_activ", {});
			s_(self, "se", {});
			s_(self, "se_range", {});
			s_(self, "se_color", {});
			s_(self, "se_activ", {});
			s_(self, "ss", {});
			s_(self, "ss_range", {});
			s_(self, "ss_color", {});
		END;
		IF type_ == "modify" THEN
			// v= {1, "x", number}
			LOCAL lst:= g_(self,"l"+v(2));
			lst(v(1)):= v(3);
			s_(self, "l"+v(2), lst);
		END;
		IF type_ == "newSet" THEN
			// v = {"name", lx, ly, lz, act, color}
			LOCAL a:= SIZE(g_(self, "lx"));
			LOCAL b:= SIZE(v(2));
			s_(self, "sv", CONCAT(g_(self, "sv"), v(1) )); // name
			s_(self, "lx", CONCAT(g_(self, "lx"), v(2))); // vertexes
			s_(self, "ly", CONCAT(g_(self, "ly"), v(3)));
			s_(self, "lz", CONCAT(g_(self, "lz"), v(4)));
			s_(self, "sv_range", CONCAT(g_(self, "sv_range"), {{a+1,a+b}}));// range Set
			s_(self, "sv_activ", CONCAT(g_(self, "sv_activ"), v(5)));		// vertices activated
			s_(self, "sv_color", CONCAT(g_(self, "sv_color"), {v(6)}));		// color Set
		END;
		IF type_ == "addListSet" THEN
			// v = {"name", lx, ly, lz}
			LOCAL sv:= g_(self, "sv");
			LOCAL range:= g_(self, "sv_range");
			LOCAL rangei:= range(POS(sv, v(1)));
			s_(self, "lx", PUTo(g_(self, "lx"), v(2), rangei(2)+1)); // vertexes
			s_(self, "ly", PUTo(g_(self, "ly"), v(3), rangei(2)+1));
			s_(self, "lz", PUTo(g_(self, "lz"), v(4), rangei(2)+1));
			
			LOCAL dif:= SIZE(v(2));
			Board_updateSet(self,     rangei(2), dif, "sv", "sv_range");
			Board_updateEdge(self,    rangei(2), dif);
			Board_updateSurface(self, rangei(2), dif);
		END;
		IF type_ == "removeSet" THEN
			// v = "name"
			LOCAL sv:= g_(self, "sv");
			LOCAL range:= g_(self, "sv_range");
			LOCAL index:= POS(sv, v);
			LOCAL rangei:= range(index);
			s_(self, "sv",       SUBe(sv, index)); // name
			s_(self, "sv_range", SUBe(range, index)); // range
			s_(self, "sv_color", SUBe(g_(self, "sv_color"), index)); // color
			s_(self, "sv_activ", SUBe(g_(self, "sv_activ"), index)); // activ
			s_(self, "lx", SUBer(g_(self,"lx"), rangei));
			s_(self, "ly", SUBer(g_(self,"ly"), rangei));
			s_(self, "lz", SUBer(g_(self,"lz"), rangei));
			
			LOCAL dif:= -(rangei(2)-rangei(1)+1);
			Board_updateSet(self,     rangei(2), dif, "sv", "sv_range");
			Board_updateEdge(self,    rangei(2), dif);
			Board_updateSurface(self, rangei(2), dif);
		END;
		IF type_ == "replaceSet" THEN
			// v = {"name", lx, ly, lz}
			LOCAL sv:= g_(self, "sv");
			LOCAL range:= g_(self, "sv_range");
			LOCAL rangei:= range(POS(sv, v(1)));
			s_(self, "lx", PUTosr(g_(self, "lx"), v(2), rangei));
			s_(self, "ly", PUTosr(g_(self, "ly"), v(3), rangei));
			s_(self, "lz", PUTosr(g_(self, "lz"), v(4), rangei));
			
			LOCAL dif:= SIZE(v(2)) - (rangei(2) - rangei(1) + 1);
			Board_updateSet(self,     rangei(2), dif, "sv", "sv_range");
			Board_updateEdge(self,    rangei(2), dif);
			Board_updateSurface(self, rangei(2), dif);
		END;
	END;
	s_(self, "lvselect", {});
	s_(self, "leselect", {});
	s_(self, "dv", SIZE(g_(self,"lx")));
	LOCAL lx:= g_(self,"lx");
	LOCAL ly:= g_(self,"ly");
	LOCAL lz:= g_(self,"lz");
	LOCAL pt:= r3d(lx, ly, lz, g_(self,"ang"), g_(self,"proj"), g_(self,"zf"));
	Board_Norm(self, pt(1), pt(2));
END;

Board_updateEdge(self, index, dif)
BEGIN
	IF SIZE(g_(self, "li")) THEN
		LOCAL li:= g_(self, "li");
		LOCAL lj:= g_(self, "lj");
		LOCAL lif:= li > index;
		LOCAL ljf:= lj > index;
		LOCAL lic:= li + dif*lif;
		LOCAL ljc:= lj + dif*ljf;
		LOCAL i, ia, lio:={}, ljo:={};
		FOR i:=1 TO SIZE(li) DO
			IF NOT MAX({li(i),lj(i)}==index) THEN
				lio:= CONCAT(lio, lic(i));
				ljo:= CONCAT(ljo, ljc(i));
			ELSE
				Board_updateSet(self, i-ia, -1, "se", "se_range");
				ia:= ia+1;
			END;
		END;
		s_(self, "li", lio);
		s_(self, "lj", ljo);
		s_(self, "de", SIZE(lio));
	END;
END;

Board_updateSurface(self, index, dif)
BEGIN
	IF SIZE(g_(self, "ls")) THEN
		LOCAL ls:= g_(self, "ls");
		LOCAL lsf:= ls > index;
		LOCAL lsf1:= (ls == index);
		LOCAL lsc:= ls + dif*lsf;
		LOCAL i, ia, lso:={};
		FOR i:=1 TO SIZE(ls) DO
			IF NOT MAX(lsf1(i)) THEN
				lso:= CONCAT(lso, {lsc(i)});
			ELSE
				Board_updateSet(self, i-ia, -1, "ss", "ss_range");
				ia:= ia+1;
			END;
		END;
		s_(self, "ls", lso);
		s_(self, "ds", SIZE(lso));
	END;
END;

Board_updateSet(self, index, dif, set1, set2)
BEGIN
	LOCAL i, set:= g_(self, set1);
	LOCAL range:= g_(self, set2); // range
	LOCAL rangeo:= {};
	LOCAL prop:= CONCAT({g_(self,set1+"_color")},IFTE(set1=="ss",{},{g_(self,set1+"_activ")}));
	LOCAL propo:= {{},{},{}};
	FOR i:=1 TO SIZE(set) DO
		CASE
			IF range(i,1) == index AND range(i,2) == index AND NOT(dif+1) THEN
			END;
			IF range(i,1) <= index <= range(i,2) THEN
				rangeo(0):= range(i) + {0, dif};
				propo(1,0):= set(i);    // name
				propo(2,0):= prop(1,i); // color
				IF set1 <> "ss" THEN
					propo(3,0):= prop(2,i); // activated
				END;
			END;
			IF index < range(i,1) THEN
				rangeo(0):= range(i) + dif;
				propo(1,0):= set(i);    // name
				propo(2,0):= prop(1,i); // color
				IF set1 <> "ss" THEN
					propo(3,0):= prop(2,i); // activated
				END;
			END;
			IF index > range(i,2) THEN
				rangeo(0):= range(i);
				propo(1,0):= set(i);    // name
				propo(2,0):= prop(1,i); // color
				IF set1 <> "ss" THEN
					propo(3,0):= prop(2,i); // activated
				END;
			END;
		END;
	END;
	s_(self, set1, propo(1)); // name
	s_(self, set2, rangeo);   // range
	s_(self, set1+"_color", propo(2)); // color
	IF set1 <> "ss" THEN
		s_(self, set1+"_activ", propo(3)); // activ
	END;
END;

Board_Edge(self, type_, v)
BEGIN
	CASE
		IF type_ == "add" THEN
			s_(self, "li", CONCAT(g_(self, "li"), {v(1)}));
			s_(self, "lj", CONCAT(g_(self, "lj"), {v(2)}));
		END;
		IF type_ == "addList" THEN
			s_(self, "li", CONCAT(g_(self, "li"), v(1)));
			s_(self, "lj", CONCAT(g_(self, "lj"), v(2)));
		END;
		IF type_ == "setList" THEN
			s_(self, "li", v(1));
			s_(self, "lj", v(2));
		END;
		IF type_ == "remove" THEN
			s_(self, "li", SUBe(g_(self,"li"), v));
			s_(self, "lj", SUBe(g_(self,"lj"), v));
		END;		
		IF type_ == "clear" THEN
			s_(self, "li", {});
			s_(self, "lj", {});
		END;
		IF type_ == "newSet" THEN
			// v = {"name", li, lj, act, color}
			LOCAL a:= SIZE(g_(self, "li"));
			LOCAL b:= SIZE(v(2));
			s_(self, "se", CONCAT(g_(self, "se"), v(1) )); // name
			s_(self, "li", CONCAT(g_(self, "li"), v(2)));  // edges
			s_(self, "lj", CONCAT(g_(self, "lj"), v(3)));
			s_(self, "se_range", CONCAT(g_(self, "se_range"), {{a+1,a+b}}));// range Set
			s_(self, "se_activ", CONCAT(g_(self, "se_activ"), v(4)));		// edges activated
			s_(self, "se_color", CONCAT(g_(self, "se_color"), {v(5)}));		// color Set
		END;
		IF type_ == "addListSet" THEN
			// v = {"name", li, lj}
			LOCAL se:= g_(self, "se");
			LOCAL range:= g_(self, "se_range");
			LOCAL rangei:= range(POS(se, v(1)));
			s_(self, "li", PUTo(g_(self, "li"), v(2), rangei(2)+1)); // edges
			s_(self, "lj", PUTo(g_(self, "lj"), v(3), rangei(2)+1));
			
			LOCAL dif:= SIZE(v(2));
			Board_updateSet(self, rangei(2), dif, "se", "se_range");
		END;
		IF type_ == "removeSet" THEN
			// v = "name"
			LOCAL se:= g_(self, "se");
			LOCAL range:= g_(self, "se_range");
			LOCAL index:= POS(se, v);
			LOCAL rangei:= range(index);
			s_(self, "se",       SUBe(se, index)); // name
			s_(self, "se_range", SUBe(range, index)); // range
			s_(self, "se_color", SUBe(g_(self, "se_color"), index)); // color
			s_(self, "se_activ", SUBe(g_(self, "se_activ"), index)); // activ
			s_(self, "li", SUBer(g_(self,"li"), rangei));
			s_(self, "lj", SUBer(g_(self,"lj"), rangei));
			
			LOCAL dif:= -(rangei(2)-rangei(1)+1);
			Board_updateSet(self,     rangei(2), dif, "se", "se_range");
		END;
		IF type_ == "replaceSet" THEN
			// v = {"name", li, lj}
			LOCAL se:= g_(self, "se");
			LOCAL range:= g_(self, "se_range");
			LOCAL rangei:= range(POS(se, v(1)));
			s_(self, "li", PUTosr(g_(self, "li"), v(2), rangei));
			s_(self, "lj", PUTosr(g_(self, "lj"), v(3), rangei));
			
			LOCAL dif:= SIZE(v(2)) - (rangei(2) - rangei(1) + 1);
			Board_updateSet(self,     rangei(2), dif, "se", "se_range");
		END;
	END;
	s_(self, "de", SIZE(g_(self,"li")));
END;

Board_Surfaces(self, type_, ls)
BEGIN
	CASE
		IF type_ == "add" THEN
			s_(self, "ls", CONCAT(g_(self, "ls"), ls));
		END;
		IF type_ == "addList" THEN
			s_(self, "ls", CONCAT(g_(self, "ls"), ls));
		END;
		IF type_ == "setList" THEN
			s_(self, "ls", ls);
		END;	
		IF type_ == "clear" THEN
			s_(self, "ls", {});
		END;
		IF type_ == "newSet" THEN
			// ls = {"name", ls, color}
			LOCAL a:= SIZE(g_(self, "ls"));
			LOCAL b:= SIZE(ls(2));
			s_(self, "ss", CONCAT(g_(self, "ss"), ls(1) )); // name
			s_(self, "ls", CONCAT(g_(self, "ls"), ls(2)));  // surfaces
			s_(self, "ss_range", CONCAT(g_(self, "ss_range"), {{a+1,a+b}}));// range set
			s_(self, "ss_color", CONCAT(g_(self, "ss_color"), {ls(3)}));		// color set
		END;
		IF type_ == "addListSet" THEN
			// ls = {"name", ls}
			LOCAL ss:= g_(self, "ss");
			LOCAL range:= g_(self, "ss_range");
			LOCAL rangei:= range(POS(ss, ls(1)));
			s_(self, "ls", PUTo(g_(self, "ls"), ls(2), rangei(2)+1)); // surfaces
			
			LOCAL dif:= SIZE(ls(2));
			Board_updateSet(self, rangei(2), dif, "ss", "ss_range");
		END;
		IF type_ == "removeSet" THEN
			// ls = "name"
			LOCAL ss:= g_(self, "ss");
			LOCAL range:= g_(self, "ss_range");
			LOCAL index:= POS(ss, ls);
			LOCAL rangei:= range(index);
			s_(self, "ss",       SUBe(ss, index)); // name
			s_(self, "ss_range", SUBe(range, index)); // range
			s_(self, "ss_color", SUBe(g_(self, "ss_color"), index)); // color
			s_(self, "ss_activ", SUBe(g_(self, "ss_activ"), index)); // activ
			s_(self, "ls", SUBer(g_(self,"ls"), rangei));
			
			LOCAL dif:= -(rangei(2)-rangei(1)+1);
			Board_updateSet(self, rangei(2), dif, "ss", "ss_range");
		END;
		IF type_ == "replaceSet" THEN
			// ls = {"name", ls}
			LOCAL ss:= g_(self, "ss");
			LOCAL range:= g_(self, "ss_range");
			LOCAL rangei:= range(POS(ss, ls(1)));
			s_(self, "ls", PUTosr(g_(self, "ls"), ls(2), rangei));
			
			LOCAL dif:= SIZE(ls(2)) - (rangei(2) - rangei(1) + 1);
			Board_updateSet(self, rangei(2), dif, "ss", "ss_range");
		END;
	END;
	s_(self, "ds", SIZE(g_(self,"ls")));
END;

Board_Norm(self, lx, ly)
BEGIN
	CASE
		IF SIZE(lx) == 0 THEN
			s_(self, "lxn", {});
			s_(self, "lyn", {});
		END;
		IF SIZE(lx) == 1 THEN
			LOCAL lxn:= {g_(self,"x") + g_(self,"w")/2};
			LOCAL lyn:= {g_(self,"y") + g_(self,"h")/2};
			s_(self, "lxn", lxn);
			s_(self, "lyn", lyn);
		END;
		IF SIZE(lx) THEN
			LOCAL dx:= g_(self, "deltax");
			LOCAL dy:= g_(self, "deltay");
			LOCAL x:= g_(self, "x") + dx(1);
			LOCAL y:= g_(self, "y") + dy(1);
			LOCAL w:= g_(self, "w") - dx(1)-dx(2);
			LOCAL h:= g_(self, "h") - dy(1)-dy(2);
			LOCAL xmax:= MAX(lx), xmin:= MIN(lx);
			LOCAL ymax:= MAX(ly), ymin:= MIN(ly);
			LOCAL x_r:= IFTE(xmax-xmin, xmax-xmin, 0.000001);
			LOCAL y_r:= IFTE(ymax-ymin, ymax-ymin, 0.000001);
			LOCAL sca:= MIN(w/x_r, h/y_r);
			LOCAL lxn:=  (lx-xmin)*sca + (x+  (w-sca*(xmax-xmin))/2);
			LOCAL lyn:= -(ly-ymin)*sca + (y+h-(h-sca*(ymax-ymin))/2);
			s_(self, "lxn", lxn);
			s_(self, "lyn", lyn);
		END;
	END;
END;

Board_Projection(self, proj)
BEGIN
	s_(self, "proj", IFTE(proj=="perspective", "p", "o"));
END;

Board_PFactor(self, zf)
BEGIN
	s_(self, "zf", zf);
END;

Board_Plot(self)
BEGIN
	s_(self, "slot", 0);
	IF g_(self, "open") THEN
		LOCAL x:= g_(self, "x");
		LOCAL y:= g_(self, "y");
		LOCAL w:= g_(self, "w");
		LOCAL h:= g_(self, "h");
		LOCAL dv:= g_(self, "dv");
		LOCAL de:= g_(self, "de");
		LOCAL ds:= g_(self, "ds");
		LOCAL zf:= g_(self, "zf");
		LOCAL lxn:= g_(self, "lxn");
		LOCAL lyn:= g_(self, "lyn");
		
		Board_PlotBackground(self, x, y, w, h);
		Board_PlotSurfaces(self, lxn, lyn, ds);
		Board_PlotEdges(self, lxn, lyn, de);
		Board_PlotVertexes(self, lxn, lyn, dv);
		Board_PlotAxis(self, x, y, h, zf);
		Board_PlotFieldSelect(self, x, y, w, h);
		Board_PlotItemsSelected(self, lxn, lyn);
		Board_PlotAlphaKey(self, x, y);
		Board_PlotBox(self, x, y, w);
		Board_PlotRen(self, x, y, w);
	END;
END;

Board_PlotRen(self, x, y, w)
BEGIN
	IF g_(self, "alpha") THEN
		LOCAL case_:= {"O", "P"};
		RECT_P(G1,x+w-24,y+40, x+w-10, y+56, RGBL(gColor("green")), {RGBL(gColor("green")), 128});
		drawText(case_(POS({"o","p"}, g_(self,"proj"))), x+w-21, y+43, 2, gColor("yellow"));
	END;
END;

Board_PlotBox(self, x, y, w)
BEGIN
	LOCAL ang:= g_(self, "ang");
	LOCAL color:=  gColor("gray");
	LOCAL color1:= {RGBL(gColor("gray")), 128};
	LOCAL a:= Cube(ang) + {x+w-17, y+18, 0};
	FILLPOLY_P(G1,{{a(1,1),a(2,1)}, {a(1,2),a(2,2)},   {a(1,3),a(2,3)},   {a(1,4),a(2,4)}},   color1);
	FILLPOLY_P(G1,{{a(1,5),a(2,5)}, {a(1,6),a(2,6)},   {a(1,7),a(2,7)},   {a(1,8),a(2,8)}},   color1);
	FILLPOLY_P(G1,{{a(1,9),a(2,9)}, {a(1,10),a(2,10)}, {a(1,11),a(2,11)}, {a(1,12),a(2,12)}}, color1);
	drawPoly({{a(1,1),a(2,1)}, {a(1,2),a(2,2)},   {a(1,3),a(2,3)},   {a(1,4),a(2,4)}},   color);
	drawPoly({{a(1,5),a(2,5)}, {a(1,6),a(2,6)},   {a(1,7),a(2,7)},   {a(1,8),a(2,8)}},   color);
	drawPoly({{a(1,9),a(2,9)}, {a(1,10),a(2,10)}, {a(1,11),a(2,11)}, {a(1,12),a(2,12)}}, color);
END;

Board_PlotAlphaKey(self, x, y)
BEGIN
	IF g_(self, "alpha") THEN
		LOCAL color:= RGBL(gColor("orange"));
		ARC_P(G1, x+6, y+6, {4,4}, {color, {color, 100}});
		drawArc(  x+6, y+6, 4, gColor("orange"));
	END;
END;

Board_PlotBackground(self, x, y, w, h)
BEGIN
	fillRect(x, y, w, h, g_(self, "color_bo"), g_(self, "color_bg"));
END;

Board_PlotVertexes(self, lxn, lyn, dv)
BEGIN
	LOCAL i, color_v:= g_(self, "color_v");
	LOCAL sv_range:= g_(self, "sv_range");
	LOCAL sv_color:= g_(self, "sv_color");
	LOCAL index, color;
	// Plot enumeration
	IF g_(self, "enumv") THEN
		FOR i:=1 TO dv DO
			index:= getIndex(i, sv_range);
			color:= IFTE(index, sv_color(index), color_v);		
			drawText(""+i, lxn(i)+2, lyn(i)+1, 2, color);
		END;
	END;
	
	// Plor vertexes
	FOR i:=1 TO SIZE(lxn) DO
		index:= getIndex(i, sv_range);
		color:= IFTE(index, sv_color(index), color_v);
		PIXON_P(G1, lxn(i), lyn(i), RGBL(color));
	END;
END;

Board_PlotEdges(self, lxn, lyn, de)
BEGIN
	LOCAL k, px, py;
	LOCAL li:= g_(self, "li");
	LOCAL lj:= g_(self, "lj");
	LOCAL color_e:= g_(self, "color_e");
	LOCAL se_range:= g_(self, "se_range");
	LOCAL se_color:= g_(self, "se_color");
	LOCAL index, color;
	
	// Plot enumeration
	IF g_(self, "enume") THEN
		FOR k:=1 TO de DO
			index:= getIndex(k, se_range);
			color:= IFTE(index, se_color(index), color_e);
			px:= (lxn(li(k)) + lxn(lj(k)))/2 + 2;
			py:= (lyn(li(k)) + lyn(lj(k)))/2 + 1;
			drawText(""+k, px, py, 2, color);
		END;
	END;
	
	// Plot Edges
	FOR k:=1 TO SIZE(li) DO
		index:= getIndex(k, se_range);
		color:= IFTE(index, se_color(index), color_e);
		drawLine(lxn(li(k)), lyn(li(k)), lxn(lj(k)), lyn(lj(k)), color);
	END;
END;

Board_PlotSurfaces(self, lxn, lyn, ds)
BEGIN
	LOCAL ls:= g_(self, "ls");
	LOCAL color_s:= RGBL(g_(self, "color_s"));
	LOCAL coord:={},k,i;
	
	LOCAL ss_range:= g_(self, "ss_range");
	LOCAL ss_color:= g_(self, "ss_color");
	LOCAL index, color;
	FOR k:=1 TO ds DO
		FOR i:=1 TO SIZE(ls(k)) DO
			coord(i):= {lxn(ls(k,i)), lyn(ls(k,i))};
		END;
		index:= getIndex(k, ss_range);
		color:= IFTE(index, RGBL(ss_color(index)), color_s);
		FILLPOLY_P(G1, coord, color, 128);
	END;
END;

Board_PlotAxis(self, x, y, h, zf)
BEGIN
	LOCAL ang:= g_(self,"ang");
	LOCAL d:= IFTE(g_(self,"proj")=="p", 102, 17);
	LOCAL a:= r3d({0.7,0,0,-1,1,0,0}, {0,0.7,0,-1,0,1,0}, {0,0,0.7,-1,0,0,1}, ang, g_(self,"proj"), zf)*d;
	LOCAL px:= x+20;
	LOCAL py:= y+h-21;
	
	// Observer position
	LOCAL ri:= (rotz(ang(3))*rotx(ang(1))*roty(ang(2)))^-1;
	LOCAL ep:= mat2list(EVAL(ri*[[0],[0],[4]]));
	LOCAL ds:= sortIndex({norm({0.7,0,0}-ep,2), norm({0,0.7,0}-ep,2), norm({0,0,0.7}-ep,2)});
	LOCAL v1:= {5,6,7}, v2:= {"x","y","z"}, v3:= {"red","green","yellow"}, v4:={1,2,3};
	
	drawLine(px, py, px+a(1,v4(ds(3))), py-a(2,v4(ds(3))), gColor(v3(ds(3))));
	drawText(v2(ds(3)), px+a(1,v1(ds(3)))-2.5, py-a(2,v1(ds(3)))-6, 2, gColor(v3(ds(3))));
	drawLine(px, py, px+a(1,v4(ds(2))), py-a(2,v4(ds(2))), gColor(v3(ds(2))));
	drawText(v2(ds(2)), px+a(1,v1(ds(2)))-2.5, py-a(2,v1(ds(2)))-6, 2, gColor(v3(ds(2))));
	drawLine(px, py, px+a(1,v4(ds(1))), py-a(2,v4(ds(1))), gColor(v3(ds(1))));
	drawText(v2(ds(1)), px+a(1,v1(ds(1)))-2.5, py-a(2,v1(ds(1)))-6, 2, gColor(v3(ds(1))));
END;

Board_PlotFieldSelect(self, x, y, w, h)
BEGIN
	LOCAL field:= g_(self, "field");
	IF isList(field) AND SIZE(field)==4 AND NOT(g_(self, "alpha")) THEN
		LOCAL color:= RGBL(IFTE(field(3)-field(1)>0, gColor("blue1"), gColor("orange")));
		RECT_P(G1, field(1), field(2), field(3), field(4), color, {color, 170});
	END;
END;

Board_PlotItemsSelected(self, lxn, lyn)
BEGIN
	LOCAL lvsel:= g_(self, "lvselect");
	LOCAL color_vs:= g_(self, "color_vs");
	LOCAL i;
	//vertexes
	FOR i:=1 TO SIZE(lvsel) DO
		drawRect(lxn(lvsel(i))-1, lyn(lvsel(i))-1, 2, 2, color_vs);
	END;
	
	//edges
	LOCAL lesel:= g_(self, "leselect");
	LOCAL li:= g_(self, "li");
	LOCAL lj:= g_(self, "lj");
	LOCAL color_es:= g_(self, "color_es");
	FOR i:=1 TO SIZE(lesel) DO
		drawLine(lxn(li(lesel(i))), lyn(li(lesel(i))), lxn(lj(lesel(i))), lyn(lj(lesel(i))), color_es);
	END;
END;

Board_cotrains(self, xm, ym)
BEGIN
	LOCAL x:= g_(self, "x");
	LOCAL y:= g_(self, "y");
	LOCAL w:= g_(self, "w");
	LOCAL h:= g_(self, "h");
	
	RETURN (x<xm<x+w) AND (y<ym<y+h);
END;

Board_mouseDown(self, xm, ym)
BEGIN
	LOCAL focus:= Board_cotrains(self, xm, ym);
	s_(self, "focus",   focus);
	s_(self, "field",   Nill);
	
	IF focus AND NOT(g_(self, "alpha")) THEN
		s_(self, "lvselect", {});
		s_(self, "leselect", {});
		Board_VertexSelected(self, xm, ym);
		IF NOT SIZE(g_(self, "lvselect")) THEN
			Board_EdgeSelected(self, xm, ym);
			IF SIZE(g_(self, "leselect")) THEN // SIGNAL EDGE
				Widget_Signal(g_(self, "signalEdge"));
			END;
		ELSE // SIGNAL VERTEX
			Widget_Signal(g_(self, "signalVertex"));
		END;
	END;
	
	LOCAL ang:= g_(self, "ang");
	IF focus AND NOT(ΣLIST(ABS(ang(1))=={0,90,180}) AND ΣLIST(ABS(ang(2))=={0,90,180})) THEN
		Board_LayerCubeSelected(self, xm, ym, g_(self, "zf"));
	END;
	IF focus AND g_(self, "alpha") THEN
		Board_UpdateRen(self, xm, ym, g_(self, "zf"));
	END;
END;

Board_Connect(self, signal, args)
BEGIN
	Widget_Connect(self, signal, args);
END;

Board_UpdateRen(self, xm, ym, zf)
BEGIN
	LOCAL x:= g_(self, "x");
	LOCAL y:= g_(self, "y");
	LOCAL w:= g_(self, "w");
	IF x+w-26<=xm<=x+w-10  AND y+40<=ym<=y+56 THEN
		LOCAL case_:= {"p", "o"};
		s_(self, "proj", case_(POS({"o","p"}, g_(self, "proj"))));
		LOCAL lx:= g_(self,"lx");
		LOCAL ly:= g_(self,"ly");
		LOCAL lz:= g_(self,"lz");
		LOCAL pt:= r3d(lx, ly, lz, g_(self,"ang"), g_(self,"proj"), zf);
		Board_Norm(self, pt(1), pt(2));
	END;
END;

Board_mouseLongClick(self, xm, ym)
BEGIN
	s_(self, "field", Nill);
END;

Board_mouseMove(self, action)
BEGIN
	IF g_(self, "focus") AND NOT(g_(self, "alpha")) THEN
		LOCAL x:= g_(self, "x");
		LOCAL y:= g_(self, "y");
		LOCAL w:= g_(self, "w");
		LOCAL h:= g_(self, "h");
		LOCAL field:= g_(self, "field");
		LOCAL xm:= action(1,2);
		LOCAL ym:= action(1,3);
		xm:= clamp(xm, x, x+w); //MIN(MAX(xm,x), x+w);
		ym:= clamp(ym, y, y+h); //MIN(MAX(ym,y), y+h);
		s_(self, "field", IFTE(isList(field), {field(1), field(2), xm, ym}, {xm, ym}));
	END;
	IF g_(self, "focus") AND g_(self, "alpha") THEN
		s_(self, "ang", rotate_cam(action, g_(self, "ang")));
		LOCAL lx:= g_(self,"lx");
		LOCAL ly:= g_(self,"ly");
		LOCAL lz:= g_(self,"lz");
		LOCAL pt:= r3d(lx, ly, lz, g_(self,"ang"), g_(self,"proj"), g_(self,"zf"));
		Board_Norm(self, pt(1), pt(2));
	END;
END;

Board_mouseUp(self)
BEGIN
	IF NOT(g_(self, "alpha")) THEN
		Board_ItemsSelected(self);
	END;
	s_(self, "field", Nill);
END;

Board_LayerCubeSelected(self, xm, ym, zf)
BEGIN
	LOCAL x:= g_(self, "x");
	LOCAL y:= g_(self, "y");
	LOCAL w:= g_(self, "w");
	LOCAL ang:= g_(self, "ang");
	LOCAL a:= Cube(ang) + {x+w-17, y+18, 0};
	LOCAL b:= {90,90}*(ROUND({ang(2),2*ang(2)}/{90,180}+{0,-SIGN(ang(2))},0) + {0,SIGN(ang(2))});
	
	LOCAL case_:= {};
	case_(1):= {{0,0,0},{0,-90,0},{90,b(1),0}};
	case_(2):= {{0,0,0},{0,-90,0},{-90,b(1),0}};
	case_(3):= {{-90,b(1),0},{0,0,0},{0,90,0}};
	case_(4):= {{0,0,0},{0,90,0},{90,b(1),0}};
	case_(5):= {{0,90,0},{0,180,0},{-90,b(2),0}};
	case_(6):= {{90,b(2),0},{0,90,0},{0,180,0}};
	case_(7):= {{0,-90,0},{0,-180,0},{90,b(2),0}};
	case_(8):= {{0,-90,0},{0,-180,0},{-90,b(2),0}};
	
	CASE
		IF isPinQuad(xm,ym, a(1,1),a(2,1), a(1,2),a(2,2), a(1,3),a(2,3), a(1,4),a(2,4)) THEN
			s_(self, "ang", case_(a(3),1));
			case_:= 1;
		END;
		IF isPinQuad(xm,ym, a(1,5),a(2,5), a(1,6),a(2,6), a(1,7),a(2,7), a(1,8),a(2,8)) THEN
			s_(self, "ang", case_(a(3),2));
			case_:= 1;
		END;
		IF isPinQuad(xm,ym, a(1,9),a(2,9), a(1,10),a(2,10), a(1,11),a(2,11), a(1,12),a(2,12)) THEN
			s_(self, "ang", case_(a(3),3));
			case_:= 1;
		END;
		case_:= 0;
	END;
	IF case_ THEN
		LOCAL lx:= g_(self,"lx");
		LOCAL ly:= g_(self,"ly");
		LOCAL lz:= g_(self,"lz");
		LOCAL pt:= r3d(lx, ly, lz, g_(self,"ang"), "o", g_(self,"zf"));
		Board_Norm(self, pt(1), pt(2));
	END;
END;

Board_ItemsSelected(self)
BEGIN
	LOCAL field:= g_(self, "field");
	IF isList(field) AND SIZE(field)==4 AND NOT(g_(self, "alpha")) THEN
		LOCAL lxn:= g_(self, "lxn");
		LOCAL lyn:= g_(self, "lyn");
		LOCAL i, flag, list;
		
		//vertexes
		LOCAL range:= g_(self, "sv_range");
		LOCAL activ:= g_(self, "sv_activ");
		LOCAL index, activt;
		list:= {};
		FOR i:=1 TO g_(self, "dv") DO
			flag:= isPinRect(lxn(i), lyn(i), field(1), field(2), field(3), field(4));
			index:= getIndex(i, range);
			activt:= IFTE(NOT index, 1, activ(index));
			list:= CONCAT(list, IFTE(flag AND activt, i, {}));
		END;
		s_(self, "lvselect", list);
		
		//edges
		LOCAL xi, yi, xj, yj;
		LOCAL li:= g_(self, "li");
		LOCAL lj:= g_(self, "lj");
		
		LOCAL range:= g_(self, "se_range");
		LOCAL activ:= g_(self, "se_activ");
		LOCAL index, activt;
		list:= {};
		IF field(3)-field(1)>0 THEN
			FOR i:=1 TO g_(self, "de") DO
				flag:= isPinRect(lxn(li(i)), lyn(li(i)), field(1), field(2), field(3), field(4));
				flag:= flag AND isPinRect(lxn(lj(i)), lyn(lj(i)), field(1), field(2), field(3), field(4));
				index:= getIndex(i, range);
				activt:= IFTE(NOT index, 1, activ(index));
				list:= CONCAT(list, IFTE(flag AND activt, i, {}));
			END;
		ELSE
			FOR i:=1 TO g_(self, "de") DO
				xi:= lxn(li(i));
				yi:= lyn(li(i));
				xj:= lxn(lj(i));
				yj:= lyn(lj(i));
				
				index:= getIndex(i, range);
				activt:= IFTE(NOT index, 1, activ(index));
				flag:= lineRect(xi, yi, xj, yj, field(1), field(2), field(3), field(4));
				list:= CONCAT(list, IFTE(flag AND activt, i, {}));
			END;
		END;
		s_(self, "leselect", list);
	END;
END;

Board_VertexSelected(self, xm, ym)
BEGIN
	LOCAL i, field:= g_(self, "field");
	LOCAL lxn:= g_(self, "lxn");
	LOCAL lyn:= g_(self, "lyn");
	
	LOCAL range:= g_(self, "sv_range");
	LOCAL activ:= g_(self, "sv_activ");
	LOCAL index, activt;
	FOR i:=1 TO g_(self, "dv") DO
		IF norm({xm-lxn(i), ym-lyn(i)}, 2) < 6 THEN
			index:= getIndex(i, range);
			activt:= IFTE(NOT index, 1, activ(index));
			IF activt THEN
				s_(self, "lvselect", {i});
				BREAK;
			END;
		END;
	END;
END;

Board_EdgeSelected(self, xm, ym)
BEGIN
	LOCAL lxn:= g_(self, "lxn");
	LOCAL lyn:= g_(self, "lyn");
	LOCAL li:= g_(self, "li");
	LOCAL lj:= g_(self, "lj");
	LOCAL i, dist, xi, yi, xj, yj, sig;
	
	LOCAL range:= g_(self, "se_range");
	LOCAL activ:= g_(self, "se_activ");
	LOCAL index, activt;
	FOR i:=1 TO g_(self, "de") DO
		xi:= lxn(li(i));
		yi:= lyn(li(i));
		xj:= lxn(lj(i));
		yj:= lyn(lj(i));
		dist:= distPtoLine(xm,ym,xi,yi,xj,yj);
		IF ABS(dist)<6 AND isPinLineProj(xm,ym,xi,yi,xj,yj) THEN
			index:= getIndex(i, range);
			activt:= IFTE(NOT index, 1, activ(index));
			IF activt THEN
				s_(self, "leselect", {i});
				BREAK;
			END;
		END;
	END;
END;

Board_alphaKey(self)
BEGIN
	s_(self, "alpha", NOT(g_(self, "alpha")));
END;

r3d(lx, ly, lz, ang, proj, zf)
BEGIN
	IF NOT SIZE(lx) THEN
		RETURN {{}, {}};
	END;
	IF SIZE(lx) == 1 THEN
		RETURN {{0}, {0}};
	END;
	LOCAL i, points:= {}, n:= SIZE(lx);
	LOCAL form:= AAngle;
	AAngle:= 2;
	LOCAL rx:= rotx(ang(1));
	LOCAL ry:= roty(ang(2));
	LOCAL rz:= rotz(ang(3));
	AAngle:= form;
	LOCAL dx:= {MIN(lx), MAX(lx)};
	LOCAL dy:= {MIN(ly), MAX(ly)};
	LOCAL dz:= {MIN(lz), MAX(lz)};
	lx:= lx - (dx(1)+dx(2))/2;
	ly:= ly - (dy(1)+dy(2))/2;
	lz:= lz - (dz(1)+dz(2))/2;
	IF proj == "p" THEN
		IF NOT(ROUND(dz(2)-dz(1), 4)) OR dz(2)-dz(1) < MAX(dx(2)-dx(1),dy(2)-dy(1)) THEN
			dz:= MAX(dx(2)-dx(1), dy(2)-dy(1), 0.001);
			dz:= {-dz, dz};
		END;
		LOCAL z, pr, dist:= zf*(dz(2)-dz(1));
		FOR i:=1 TO n DO
			pr:= rz*rx*ry*([[lx(i)],[ly(i)],[lz(i)]]);
			z:=  1/(dist-pr(3,1));
			points(i):= mat2list(EVAL( [[z,0,0],[0,z,0]]*pr ));
		END;
		RETURN TRANL(points);
	ELSE
		FOR i:=1 TO n DO
			points(i):= mat2list(EVAL(rz*rx*ry*([[lx(i)],[ly(i)],[lz(i)]])));
		END;
		RETURN SUB(TRANL(points),1,2);
	END;
END;

rotate_cam(action, ang)
BEGIN
	LOCAL dx:= IFTE(action(2,1)==2, 0, action(1,2) - action(2,2));
	LOCAL dy:= IFTE(action(2,1)==2, 0, action(1,3) - action(2,3));
	LOCAL angx:= clamp(ang(1) + dy*0.5, -90, 90);
	LOCAL angy:= ang(2) + dx*0.5;
	angy:= IFTE(ABS(angy)>180, angy-SIGN(angy)*360, angy);
	
	RETURN {angx, angy, ang(3)};
END;

Cube(ang)
BEGIN
	LOCAL a:= r3d({2,2,0,0,0,0,2,2}-1, {2,0,0,2,0,2,2,0}-1, {0,0,0,0,-2,-2,-2,-2}+1, ang, "o", 2)*{9,-9};
	LOCAL b, c:= CaseRot(ang);
	CASE
		IF c==1 THEN
			b:= {1,2,3,4,1,2,8,7,1,4,6,7};
		END; 
		IF c==2 THEN
			b:= {2,3,4,1,2,1,7,8,2,3,5,8};
		END;
		IF c==3 THEN
			b:= {3,2,8,5,3,2,1,4,3,4,6,5};
		END;
		IF c==4 THEN
			b:= {4,3,2,1,4,6,5,3,4,6,7,1};
		END;
		IF c==5 THEN
			b:= {5,3,4,6,5,8,7,6,5,3,2,8};
		END;
		IF c==6 THEN
			b:= {6,4,1,7,6,5,3,4,6,7,8,5};
		END;
		IF c==7 THEN
			b:= {7,8,2,1,7,6,5,8,7,6,4,1};
		END;
		IF c==8 THEN
			b:= {8,2,1,7,8,5,6,7,8,2,3,5};
		END;
	END;
	RETURN {get_(a(1),b), get_(a(2),b), c};
END;

CaseRot(ang)
BEGIN
	CASE
		IF 0<=ang(1)<=90 AND -90<=ang(2)<=0 THEN
			RETURN 1;
		END; 
		IF -90<=ang(1)<=0 AND -90<=ang(2)<=0 THEN
			RETURN 2;
		END;
		IF -90<=ang(1)<=0 AND 0<=ang(2)<=90 THEN
			RETURN 3;
		END;
		IF 0<=ang(1)<=90 AND 0<=ang(2)<=90 THEN
			RETURN 4;
		END;
		IF -90<=ang(1)<=0 AND 90<=ang(2)<=180 THEN
			RETURN 5;
		END;
		IF 0<=ang(1)<=90 AND 90<=ang(2)<=180 THEN
			RETURN 6;
		END;
		IF 0<=ang(1)<=90 AND -180<=ang(2)<=-90 THEN
			RETURN 7;
		END;
		IF -90<=ang(1)<=0 AND -180<=ang(2)<=-90 THEN
			RETURN 8;
		END;
	END;
END;


//******************************* CLASS FUNCTIONS *********************************
init(object, attrib, mthd, inh)
BEGIN
	// {Class Name, Object Name, attributes vars, attributes values, type inh, class inh}
	attrib:= TRANL(attrib);
	LOCAL n_atr:= attrib(1);
	LOCAL v_atr:= attrib(2);
	LOCAL tinh:= type_inheritance(inh);
	LOCAL list:= {object, Nill, n_atr, v_atr, mthd, tinh, inh};
	EXPR(object + ":= list");
END;

type_inheritance(args)
BEGIN
	// 0:Nill  1:"MainWindow"  2:{"MainWindow", "Button"}
	RETURN IFTE(isList(args), 2, IFTE(args==Nill, 0, 1));
END;

s_(self, var, val) //save
BEGIN
	EXPR(self + "(4," + attr_index(self, var) + "):=val");
END;

g_(self, var) //get
BEGIN
	RETURN EXPR(self + "(4," + attr_index(self, var) + ")");
END;

attr_index(obj, attr)
BEGIN
	RETURN POS(EXPR(obj + "(3)"), attr);
END;

func_index(obj, func)
BEGIN
	RETURN POS(EXPR(obj + "(5)"), func);
END;

def(self, func, args)
BEGIN
	LOCAL class_obj:= class_(self, func);
	LOCAL name_obj:=  STRING(name_(self));
	CASE
		IF isList(args) THEN
			LOCAL args_:= ΣLIST("args"+MAKELIST("("+X+")",X,1,SIZE(args),1)+CONCAT(MAKELIST(",",X,1,SIZE(args)-1,1),""));
			EXPR(class_obj + "_" + func + "(" + name_obj + "," + args_ + ")");
		END;
		IF TYPE(args)==2 THEN
			IF args == Nill then
				EXPR(class_obj + "_" + func + "(" + name_obj + ")");
			ELSE
				EXPR(class_obj + "_" + func + "(" + name_obj + ",args)");
			END;
		END;
		EXPR(class_obj + "_" + func + "(" + name_obj + ",args)");
	END
END;

name_(self)
BEGIN
	RETURN EXPR(self + "(2)");
END;

className(self)
BEGIN
	RETURN EXPR(self + "(1)");
END;

class_(self, func)
BEGIN
	// 0:Nill  1:"MainWindow"  2:{"MainWindow", "Button"}
	self:= EXPR(self + "(1)");
	LOCAL type_inh:= EXPR(self + "(6)");
	CASE
		IF type_inh == 0 THEN
			RETURN self;
		END;
		IF type_inh == 1 THEN
			RETURN IFTE(func_index(self, func), self, EXPR(self + "(7)"));
		END;
		IF type_inh == 2 THEN
			RETURN IFTE(func_index(self, func), self, search_func(EXPR(self + "(7)"), func));
		END;
	END;
END;

search_func(list, func)
BEGIN
	LOCAL i, out;
	FOR i:=1 TO SIZE(list) DO
		IF func_index(list(i), func) THEN
			out:= list(i);
			BREAK;
		END
	END;
	RETURN out;
END;

unpack(list)
BEGIN
	list:= STRING(list);
	RETURN list(2, SIZE(list)-2);
END;

Obj(name, obj_class)
BEGIN
	// {1:Class Name, 2:Object Name, 3:attributes vars, 4:attributes values, 5:functions, 6:type inh, 7:class inh}
	CASE
		IF SIZE(obj_class)>2 THEN
			obj_class(2):= name;
			EXPR(name + ":= obj_class");
		END;
		IF SIZE(obj_class)==2 THEN
			obj_class(1,2):= name;
			EXPR(name + ":= obj_class(1)");
			def(obj_class(2), "AddWidget", name);
		END;
		obj_class(1,2):= name;
		EXPR(name + ":= obj_class(1)");
	END;
END;


//********************************* UTILITIES ***********************************
TRANL(matriz)
BEGIN
	LOCAL i,j,dim_n,dim_m;
	LOCAL matr_r;
	dim_n:=SIZE(matriz);
	dim_m:=SIZE(matriz(1));
	matr_r:= zeros_({dim_m, dim_n});
	FOR i:=1 TO dim_n DO
		FOR j:=1 TO dim_m DO
			matr_r(j,i):=matriz(i,j);
		END;
	END;
	RETURN matr_r;
END;

drawRect(xi, yi, w, h, color)
BEGIN
	LINE_P(G1, xi,   yi,   xi+w, yi,   RGBL(color));
	LINE_P(G1, xi,   yi+h, xi+w, yi+h, RGBL(color));
	LINE_P(G1, xi,   yi,   xi,   yi+h, RGBL(color));
	LINE_P(G1, xi+w, yi,   xi+w, yi+h, RGBL(color));
END;

fillRect(x, y, w, h, color_bo, color_bg)
BEGIN
	RECT_P(G1,x,y,x+w,y+h, RGBL(color_bo), RGBL(color_bg));
END;

fillPoly1(list, color, transparency)
BEGIN
	FILLPOLY_P(G1, list, RGBL(color), transparency);
END;

wText(text,fo)
BEGIN
	RETURN TEXTOUT_P(text,G2,0,0,fo);
END;

drawPoly(p, color)
BEGIN
	LOCAL i;
	FOR i:=1 TO SIZE(p)-1 DO
		LINE_P(G1, p(i), p(i+1), RGBL(color));
	END;
	LINE_P(G1, p(0), p(1), RGBL(color));
END;

drawText(text, posx, posy, size_label, color)
BEGIN
	TEXTOUT_P(text, G1, posx, posy, size_label, RGBL(color));
END;

drawLine1(xi, yi, dx, dy, color)
BEGIN
	LINE_P(G1, xi, yi, xi+dx, yi+dy, RGBL(color));
END;

drawLine(xi, yi, xj, yj, color)
BEGIN
	LINE_P(G1, xi, yi, xj, yj, RGBL(color));
END;

drawArc(x, y, r, color)
BEGIN
	ARC_P(G1, x, y, r, RGBL(color));
END;

RGBL(list)
BEGIN
	RETURN RGB(list(1), list(2), list(3));
END;

zeros_(len)
BEGIN
	IF isList(len) THEN
		RETURN MAKELIST(MAKELIST(0,Y,1,len(2),1),X,1,len(1),1);
	ELSE
		RETURN MAKELIST(0,X,1,len,1);
	END;
END;

isList(val)
BEGIN
	RETURN TYPE(val)==6;
END;

iColor(lst, dif)
BEGIN
	RETURN lst + dif*SIGN(127.5-lst);
END;

wVal(val, wcomp, fo)
BEGIN
	IF TYPE(val)<>2 THEN val:=STRING(val); END;
	LOCAL dim_g:= wText(val,fo);
	IF dim_g>wcomp-4 THEN
		val:= LEFT(val,IP((wcomp-4)/8)-1);
		val:= val+IFTE(RIGHT(val,1)==".",".","..");
		dim_g:= wText(val,fo);
	END;
	RETURN {val, dim_g};
END;

wVali(val, wcomp, fo)
BEGIN
	IF TYPE(val)<>2 THEN val:=STRING(val); END;
	LOCAL dim_g:= wText(val,fo);
	IF dim_g>wcomp-4 THEN
		val:= RIGHT(val,IP((wcomp-4)/8)-1);
		val:= IFTE(LEFT(val,1)==".",".","..")+val;
		dim_g:= wText(val,fo);
	END;
	RETURN {val, dim_g};
END;

getK(p)
BEGIN
	LOCAL index:= POS({42,43,44,37,38,39,32,33,34,47,48,45,50,35,40,49}, p);
	LOCAL val:= {"1","2","3","4","5","6","7","8","9","0",".","-","+","/","*"," "};
	RETURN IFTE(index, val(index), "");
END;

SUBe(obj, ex)
BEGIN
	// obj={1,2,3,4}   ex=2     out: {1,3,4}
	IF isList(obj)
	THEN RETURN CONCAT(SUBo(obj,1,ex-1), SUBo(obj,ex+1,SIZE(obj)));
	ELSE RETURN SUBo(obj,1,ex-1) + SUBo(obj,ex+1,SIZE(obj));
	END;
END;

SUBer(obj, er)
BEGIN
	// obj={1,2,3,4}   er={2,3}     out: {1,4}
	IF isList(obj)
	THEN RETURN CONCAT(SUBo(obj,1,er(1)-1), SUBo(obj,er(2)+1,SIZE(obj)));
	ELSE RETURN SUBo(obj,1,er(1)-1) + SUBo(obj,er(2)+1,SIZE(obj));
	END;
END;

SUBo(obj, a, b)
BEGIN
	LOCAL n:= SIZE(obj);
	IF 1<=a<=b<=n THEN
		RETURN IFTE(isList(obj), SUB(obj,a,b), obj(a,b-a+1));
	END;
	IF 1<=a<=n AND a<=b THEN
		RETURN IFTE(isList(obj), SUB(obj,a,MIN(b,n)), obj(a,MIN(b,n)-a+1));
	END;
	RETURN IFTE(isList(obj), {}, "");
END;

PUTo(obj, val, pt)
BEGIN
	// obj={1,2,3,4}   val={7,8}   pt=3    out: {1,2, 7,8 ,3,4}
	IF isList(obj)
	THEN RETURN CONCAT(SUBo(obj,1,pt-1), val, SUBo(obj,pt,SIZE(obj)));
	ELSE RETURN SUBo(obj,1,pt-1) + val + SUBo(obj,pt,SIZE(obj));
	END;
END;

PUTos(obj, val, pt)
BEGIN
	// obj={1,2,3,4}   val={7,8}   pt=3    out: {1,2, 7,8 ,4}
	IF isList(obj)
	THEN RETURN CONCAT(SUBo(obj,1,pt-1), val, SUBo(obj,pt+1,SIZE(obj)));
	ELSE RETURN SUBo(obj,1,pt-1) + val + SUBo(obj,pt+1,SIZE(obj));
	END;
END;

PUTosr(obj, val, er)
BEGIN
	// obj={1,2,3,4}   val={7,8,9}   pt={2,3}    out: {1, 7,8,9 ,4}
	IF isList(obj)
	THEN RETURN CONCAT(SUBo(obj,1,er(1)-1), val, SUBo(obj,er(2)+1,SIZE(obj)));
	ELSE RETURN SUBo(obj,1,er(1)-1) + val + SUBo(obj,er(2)+1,SIZE(obj));
	END;
END;

sortIndex(lst)
BEGIN
    LOCAL temp;
	LOCAL i,j,n:= SIZE(lst);
    LOCAL index:= MAKELIST(X,X,1,n,1);
    FOR i:=1 TO n DO
        FOR j:=i+1 TO n DO
            IF lst(j) < lst(i) THEN
				temp:= lst(i);
				lst(i):= lst(j);
				lst(j):= temp;
				
				temp:= index(i);
				index(i):= index(j);
				index(j):= temp;
			END;
		END;
	END;
	RETURN index;
END;

getIndex(index, range)
BEGIN
	IF NOT SIZE(range) THEN
		RETURN 0;
	END;
	LOCAL j;
	FOR j:=1 TO SIZE(range) DO
		IF range(j, 1)<= index <= range(j, 2) THEN
			RETURN j;
		END;
	END;
	RETURN 0;
END;


//********************************* UTILITIES 2 ***********************************
gColor(val)
BEGIN
	LOCAL colors:= {{255,0,0}, {0,128,0}, {0,0,255}, {255,255,0}, {255,255,255}, {0,0,0}, {0,120,215},{130,0,130}, {255,130,40}, {170,170,170}, {33,40,48}, {50,170,70}};
	LOCAL labels:= {"red", "green", "blue", "yellow", "white", "black", "blue1", "purple", "orange", "gray", "bg1", "lgreen"};
	RETURN colors(POS(labels, val));
END;

distPtoLine(xp, yp, xi, yi, xj, yj)
BEGIN
	LOCAL a:= lineCoeff(xi, yi, xj, yj);
	LOCAL h:= norm({xi-xj, yi-yj}, 2);
	RETURN IFTE(h, (a(1)*xp + a(2)*yp + a(3))/h, 99);
END;

lineCoeff(xi, yi, xj, yj)
BEGIN
	RETURN {-(yj-yi), (xj-xi), (yj-yi)*xi-(xj-xi)*yi};
END;

norm(vect, n)
BEGIN
	RETURN ΣLIST(vect^n)^(1/n);
END;

isPinRect(xp, yp, xi, yi, xj, yj)
BEGIN
	RETURN isPinLineProj(xp, yp, xi, yi, xi, yj) AND isPinLineProj(xp, yp, xi, yj, xj, yj);
END;

isPinLineProj(xp, yp, xi, yi, xj, yj)
BEGIN
	LOCAL v:= {xp-xi, yp-yi};
	LOCAL s:= {xj-xi, yj-yi};
	RETURN 0 <= SProd(v,s) <= SProd(s,s);
END;

lineIntersection(xi1, yi1, xj1, yj1, xi2, yi2, xj2, yj2)
BEGIN
	IF ABS((yj1-yi1)*(xj2-xi2) - (yj2-yi2)*(xj1-xi1)) > 0 THEN
		LOCAL a:= lineCoeff(xi1, yi1, xj1, yj1);
		LOCAL b:= lineCoeff(xi2, yi2, xj2, yj2);
		LOCAL cx:= (a(2)*b(3)-b(2)*a(3))/(a(1)*b(2)-b(1)*a(2));
		LOCAL cy:= (b(1)*a(3)-a(1)*b(3))/(a(1)*b(2)-b(1)*a(2));
		RETURN isPinRect(cx, cy, xi1, yi1, xj1, yj1) AND isPinRect(cx, cy, xi2, yi2, xj2, yj2);
	ELSE
		RETURN 0;
	END;
END;

lineRect(xi, yi, xj, yj, xir, yir, xjr, yjr)
BEGIN
	LOCAL bleft := lineIntersection(xi,yi,xj,yj, xir, yir, xir, yjr);
	LOCAL bright:= lineIntersection(xi,yi,xj,yj, xjr, yir, xjr, yjr);
	LOCAL btop  := lineIntersection(xi,yi,xj,yj, xir, yir, xjr, yir);
	LOCAL bbot  := lineIntersection(xi,yi,xj,yj, xir, yjr, xjr, yjr);
	LOCAL flag:= isPinRect(xi, yi, xir, yir, xjr, yjr) AND isPinRect(xj, yj, xir, yir, xjr, yjr);
	RETURN bleft OR bright OR btop OR bbot OR flag;
END;

SProd(vect1, vect2)
BEGIN
	RETURN ΣLIST(vect1*vect2);
END;

get_(list, p)
BEGIN
	// list = {a,b,c,d,e}  p = {2,1,5}      out: {b,a,e}
	LOCAL i, out:={};
	FOR i:=1 TO SIZE(p) DO
		out(i):= list(p(i));
	END;
	RETURN out;
END;

rotz(ang)
BEGIN
	RETURN [[cos(ang),-SIN(ang),0],[SIN(ang),COS(ang),0],[0,0,1]];
END;

roty(ang)
BEGIN
	RETURN [[cos(ang),0,SIN(ang)],[0,1,0],[-SIN(ang),0,COS(ang)]];
END;

rotx(ang)
BEGIN
	RETURN [[1,0,0],[0,cos(ang),-SIN(ang)],[0,SIN(ang),COS(ang)]];
END;

clamp(val, inf, sup)
BEGIN
	RETURN MIN(MAX(val,inf),sup);
END;

sign_(xp, yp, xr1,yr1, xr2,yr2)
BEGIN
	RETURN (xp - xr2)*(yr1 - yr2) - (xr1 - xr2)*(yp - yr2);
END;

isPinTriang(xp, yp, xt1,yt1, xt2,yt2, xt3,yt3)
BEGIN
	LOCAL d1:= sign_(xp,yp, xt1,yt1, xt2,yt2);
	LOCAL d2:= sign_(xp,yp, xt2,yt2, xt3,yt3);
	LOCAL d3:= sign_(xp,yp, xt3,yt3, xt1,yt1);
	
	RETURN NOT((d1<0 OR d2<0 OR d3<0) AND (d1>0 OR d2>0 OR d3>0));
END;

isPinQuad(xp, yp, xr1,yr1, xr2,yr2, xr3,yr3, xr4,yr4)
BEGIN
	RETURN isPinTriang(xp,yp, xr1,yr1, xr2,yr2, xr3,yr3) OR isPinTriang(xp,yp, xr1,yr1, xr3,yr3, xr4,yr4);
END;
